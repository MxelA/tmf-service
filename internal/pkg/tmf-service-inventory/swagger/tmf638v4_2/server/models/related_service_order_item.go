// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RelatedServiceOrderItem RelatedServiceOrderItem (a ServiceOrder item) .The service order item which triggered service creation/change/termination.
//
// swagger:model RelatedServiceOrderItem
type RelatedServiceOrderItem struct {

	// When sub-classing, this defines the super-class
	AtBaseType *string `json:"@baseType,omitempty" bson:"@baseType,omitempty"`

	// The actual type of the target instance when needed for disambiguation.
	AtReferredType *string `json:"@referredType,omitempty" bson:"@referredType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation *strfmt.URI `json:"@schemaLocation,omitempty" bson:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType *string `json:"@type,omitempty" bson:"@type,omitempty"`

	// Action of the order item for this service
	ItemAction OrderItemActionType `json:"itemAction,omitempty"`

	// Identifier of the order item where the service was managed
	// Required: true
	ItemID string `json:"itemId" bson:"itemId,omitempty"`

	// role of the service order item for this service
	Role *string `json:"role,omitempty" bson:"role,omitempty"`

	// Reference of the related entity.
	ServiceOrderHref *string `json:"serviceOrderHref,omitempty" bson:"serviceOrderHref,omitempty"`

	// Unique identifier of a related entity.
	// Required: true
	ServiceOrderID *string `json:"serviceOrderId" bson:"serviceOrderId,omitempty"`
}

// Validate validates this related service order item
func (m *RelatedServiceOrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelatedServiceOrderItem) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RelatedServiceOrderItem) validateItemAction(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemAction) { // not required
		return nil
	}

	if err := m.ItemAction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("itemAction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("itemAction")
		}
		return err
	}

	return nil
}

func (m *RelatedServiceOrderItem) validateItemID(formats strfmt.Registry) error {

	if err := validate.RequiredString("itemId", "body", m.ItemID); err != nil {
		return err
	}

	return nil
}

func (m *RelatedServiceOrderItem) validateServiceOrderID(formats strfmt.Registry) error {

	if err := validate.Required("serviceOrderId", "body", m.ServiceOrderID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this related service order item based on the context it is used
func (m *RelatedServiceOrderItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItemAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelatedServiceOrderItem) contextValidateItemAction(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ItemAction) { // not required
		return nil
	}

	if err := m.ItemAction.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("itemAction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("itemAction")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RelatedServiceOrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelatedServiceOrderItem) UnmarshalBinary(b []byte) error {
	var res RelatedServiceOrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
