// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	models2 "github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/models"
	"net/http"

	"github.com/go-openapi/runtime"
)

// Alex Server response
// CreateServiceCreatedCode is the HTTP code returned for type CreateServiceCreated
const CreateServiceCreatedCode int = 201

/*
CreateServiceCreated Created

swagger:response createServiceCreated
*/
type CreateServiceCreated struct {

	/*
	  In: Body
	*/
	Payload *models2.Service `json:"body,omitempty"`
}

type CreateServiceCreatedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewCreateServiceCreated creates CreateServiceCreated with default headers values
func NewCreateServiceCreated() *CreateServiceCreated {

	return &CreateServiceCreated{}
}

// NewCreateServiceCreated creates CreateServiceCreatedRaw with default headers values
func NewCreateServiceCreatedRaw() *CreateServiceCreatedRaw {

	return &CreateServiceCreatedRaw{}
}

// WithPayload adds the payload to the create service created response
func (o *CreateServiceCreated) WithPayload(payload *models2.Service) *CreateServiceCreated {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the create service created response
func (o *CreateServiceCreatedRaw) WithPayload(payload interface{}) *CreateServiceCreatedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service created response
func (o *CreateServiceCreated) SetPayload(payload *models2.Service) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *CreateServiceCreatedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// CreateServiceBadRequestCode is the HTTP code returned for type CreateServiceBadRequest
const CreateServiceBadRequestCode int = 400

/*
CreateServiceBadRequest Bad Request

swagger:response createServiceBadRequest
*/
type CreateServiceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type CreateServiceBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewCreateServiceBadRequest creates CreateServiceBadRequest with default headers values
func NewCreateServiceBadRequest() *CreateServiceBadRequest {

	return &CreateServiceBadRequest{}
}

// NewCreateServiceBadRequest creates CreateServiceBadRequestRaw with default headers values
func NewCreateServiceBadRequestRaw() *CreateServiceBadRequestRaw {

	return &CreateServiceBadRequestRaw{}
}

// WithPayload adds the payload to the create service bad request response
func (o *CreateServiceBadRequest) WithPayload(payload *models2.Error) *CreateServiceBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the create service bad request response
func (o *CreateServiceBadRequestRaw) WithPayload(payload interface{}) *CreateServiceBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service bad request response
func (o *CreateServiceBadRequest) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *CreateServiceBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// CreateServiceUnauthorizedCode is the HTTP code returned for type CreateServiceUnauthorized
const CreateServiceUnauthorizedCode int = 401

/*
CreateServiceUnauthorized Unauthorized

swagger:response createServiceUnauthorized
*/
type CreateServiceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type CreateServiceUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewCreateServiceUnauthorized creates CreateServiceUnauthorized with default headers values
func NewCreateServiceUnauthorized() *CreateServiceUnauthorized {

	return &CreateServiceUnauthorized{}
}

// NewCreateServiceUnauthorized creates CreateServiceUnauthorizedRaw with default headers values
func NewCreateServiceUnauthorizedRaw() *CreateServiceUnauthorizedRaw {

	return &CreateServiceUnauthorizedRaw{}
}

// WithPayload adds the payload to the create service unauthorized response
func (o *CreateServiceUnauthorized) WithPayload(payload *models2.Error) *CreateServiceUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the create service unauthorized response
func (o *CreateServiceUnauthorizedRaw) WithPayload(payload interface{}) *CreateServiceUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service unauthorized response
func (o *CreateServiceUnauthorized) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *CreateServiceUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// CreateServiceForbiddenCode is the HTTP code returned for type CreateServiceForbidden
const CreateServiceForbiddenCode int = 403

/*
CreateServiceForbidden Forbidden

swagger:response createServiceForbidden
*/
type CreateServiceForbidden struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type CreateServiceForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewCreateServiceForbidden creates CreateServiceForbidden with default headers values
func NewCreateServiceForbidden() *CreateServiceForbidden {

	return &CreateServiceForbidden{}
}

// NewCreateServiceForbidden creates CreateServiceForbiddenRaw with default headers values
func NewCreateServiceForbiddenRaw() *CreateServiceForbiddenRaw {

	return &CreateServiceForbiddenRaw{}
}

// WithPayload adds the payload to the create service forbidden response
func (o *CreateServiceForbidden) WithPayload(payload *models2.Error) *CreateServiceForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the create service forbidden response
func (o *CreateServiceForbiddenRaw) WithPayload(payload interface{}) *CreateServiceForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service forbidden response
func (o *CreateServiceForbidden) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *CreateServiceForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// CreateServiceMethodNotAllowedCode is the HTTP code returned for type CreateServiceMethodNotAllowed
const CreateServiceMethodNotAllowedCode int = 405

/*
CreateServiceMethodNotAllowed Method Not allowed

swagger:response createServiceMethodNotAllowed
*/
type CreateServiceMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type CreateServiceMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewCreateServiceMethodNotAllowed creates CreateServiceMethodNotAllowed with default headers values
func NewCreateServiceMethodNotAllowed() *CreateServiceMethodNotAllowed {

	return &CreateServiceMethodNotAllowed{}
}

// NewCreateServiceMethodNotAllowed creates CreateServiceMethodNotAllowedRaw with default headers values
func NewCreateServiceMethodNotAllowedRaw() *CreateServiceMethodNotAllowedRaw {

	return &CreateServiceMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the create service method not allowed response
func (o *CreateServiceMethodNotAllowed) WithPayload(payload *models2.Error) *CreateServiceMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the create service method not allowed response
func (o *CreateServiceMethodNotAllowedRaw) WithPayload(payload interface{}) *CreateServiceMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service method not allowed response
func (o *CreateServiceMethodNotAllowed) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *CreateServiceMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// CreateServiceConflictCode is the HTTP code returned for type CreateServiceConflict
const CreateServiceConflictCode int = 409

/*
CreateServiceConflict Conflict

swagger:response createServiceConflict
*/
type CreateServiceConflict struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type CreateServiceConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewCreateServiceConflict creates CreateServiceConflict with default headers values
func NewCreateServiceConflict() *CreateServiceConflict {

	return &CreateServiceConflict{}
}

// NewCreateServiceConflict creates CreateServiceConflictRaw with default headers values
func NewCreateServiceConflictRaw() *CreateServiceConflictRaw {

	return &CreateServiceConflictRaw{}
}

// WithPayload adds the payload to the create service conflict response
func (o *CreateServiceConflict) WithPayload(payload *models2.Error) *CreateServiceConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the create service conflict response
func (o *CreateServiceConflictRaw) WithPayload(payload interface{}) *CreateServiceConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service conflict response
func (o *CreateServiceConflict) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *CreateServiceConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// CreateServiceInternalServerErrorCode is the HTTP code returned for type CreateServiceInternalServerError
const CreateServiceInternalServerErrorCode int = 500

/*
CreateServiceInternalServerError Internal Server Error

swagger:response createServiceInternalServerError
*/
type CreateServiceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type CreateServiceInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewCreateServiceInternalServerError creates CreateServiceInternalServerError with default headers values
func NewCreateServiceInternalServerError() *CreateServiceInternalServerError {

	return &CreateServiceInternalServerError{}
}

// NewCreateServiceInternalServerError creates CreateServiceInternalServerErrorRaw with default headers values
func NewCreateServiceInternalServerErrorRaw() *CreateServiceInternalServerErrorRaw {

	return &CreateServiceInternalServerErrorRaw{}
}

// WithPayload adds the payload to the create service internal server error response
func (o *CreateServiceInternalServerError) WithPayload(payload *models2.Error) *CreateServiceInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the create service internal server error response
func (o *CreateServiceInternalServerErrorRaw) WithPayload(payload interface{}) *CreateServiceInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create service internal server error response
func (o *CreateServiceInternalServerError) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateServiceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *CreateServiceInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
