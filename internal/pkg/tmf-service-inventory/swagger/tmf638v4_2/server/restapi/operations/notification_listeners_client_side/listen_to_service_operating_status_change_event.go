// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListenToServiceOperatingStatusChangeEventHandlerFunc turns a function with the right signature into a listen to service operating status change event handler
type ListenToServiceOperatingStatusChangeEventHandlerFunc func(ListenToServiceOperatingStatusChangeEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListenToServiceOperatingStatusChangeEventHandlerFunc) Handle(params ListenToServiceOperatingStatusChangeEventParams) middleware.Responder {
	return fn(params)
}

// ListenToServiceOperatingStatusChangeEventHandler interface for that can handle valid listen to service operating status change event params
type ListenToServiceOperatingStatusChangeEventHandler interface {
	Handle(ListenToServiceOperatingStatusChangeEventParams) middleware.Responder
}

// NewListenToServiceOperatingStatusChangeEvent creates a new http.Handler for the listen to service operating status change event operation
func NewListenToServiceOperatingStatusChangeEvent(ctx *middleware.Context, handler ListenToServiceOperatingStatusChangeEventHandler) *ListenToServiceOperatingStatusChangeEvent {
	return &ListenToServiceOperatingStatusChangeEvent{Context: ctx, Handler: handler}
}

/*
	ListenToServiceOperatingStatusChangeEvent swagger:route POST /listener/serviceOperatingStatusChangeEvent notification listeners (client side) listenToServiceOperatingStatusChangeEvent

# Client listener for entity ServiceOperatingStatusChangeEvent

Example of a client listener for receiving the notification ServiceOperatingStatusChangeEvent
*/
type ListenToServiceOperatingStatusChangeEvent struct {
	Context *middleware.Context
	Handler ListenToServiceOperatingStatusChangeEventHandler
}

func (o *ListenToServiceOperatingStatusChangeEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListenToServiceOperatingStatusChangeEventParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
