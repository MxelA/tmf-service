// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchServiceHandlerFunc turns a function with the right signature into a patch service handler
type PatchServiceHandlerFunc func(PatchServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchServiceHandlerFunc) Handle(params PatchServiceParams) middleware.Responder {
	return fn(params)
}

// PatchServiceHandler interface for that can handle valid patch service params
type PatchServiceHandler interface {
	Handle(PatchServiceParams) middleware.Responder
}

// NewPatchService creates a new http.Handler for the patch service operation
func NewPatchService(ctx *middleware.Context, handler PatchServiceHandler) *PatchService {
	return &PatchService{Context: ctx, Handler: handler}
}

/*
	PatchService swagger:route PATCH /service/{id} service patchService

Updates partially a Service

	This operation updates partially a Service entity. **Supported formats:** - `application/merge-patch+json` → body matches `Service_Update` schema.- `application/json-patch+json` → body is an array of JSON Patch operations.
*/
type PatchService struct {
	Context *middleware.Context
	Handler PatchServiceHandler
}

func (o *PatchService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchServiceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
