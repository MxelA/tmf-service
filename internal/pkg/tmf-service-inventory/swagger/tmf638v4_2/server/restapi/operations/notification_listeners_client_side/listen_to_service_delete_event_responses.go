// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	models2 "github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/models"
	"net/http"

	"github.com/go-openapi/runtime"
)

// Alex Server response
// ListenToServiceDeleteEventCreatedCode is the HTTP code returned for type ListenToServiceDeleteEventCreated
const ListenToServiceDeleteEventCreatedCode int = 201

/*
ListenToServiceDeleteEventCreated Notified

swagger:response listenToServiceDeleteEventCreated
*/
type ListenToServiceDeleteEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models2.EventSubscription `json:"body,omitempty"`
}

type ListenToServiceDeleteEventCreatedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceDeleteEventCreated creates ListenToServiceDeleteEventCreated with default headers values
func NewListenToServiceDeleteEventCreated() *ListenToServiceDeleteEventCreated {

	return &ListenToServiceDeleteEventCreated{}
}

// NewListenToServiceDeleteEventCreated creates ListenToServiceDeleteEventCreatedRaw with default headers values
func NewListenToServiceDeleteEventCreatedRaw() *ListenToServiceDeleteEventCreatedRaw {

	return &ListenToServiceDeleteEventCreatedRaw{}
}

// WithPayload adds the payload to the listen to service delete event created response
func (o *ListenToServiceDeleteEventCreated) WithPayload(payload *models2.EventSubscription) *ListenToServiceDeleteEventCreated {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service delete event created response
func (o *ListenToServiceDeleteEventCreatedRaw) WithPayload(payload interface{}) *ListenToServiceDeleteEventCreatedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service delete event created response
func (o *ListenToServiceDeleteEventCreated) SetPayload(payload *models2.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceDeleteEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceDeleteEventCreatedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceDeleteEventBadRequestCode is the HTTP code returned for type ListenToServiceDeleteEventBadRequest
const ListenToServiceDeleteEventBadRequestCode int = 400

/*
ListenToServiceDeleteEventBadRequest Bad Request

swagger:response listenToServiceDeleteEventBadRequest
*/
type ListenToServiceDeleteEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceDeleteEventBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceDeleteEventBadRequest creates ListenToServiceDeleteEventBadRequest with default headers values
func NewListenToServiceDeleteEventBadRequest() *ListenToServiceDeleteEventBadRequest {

	return &ListenToServiceDeleteEventBadRequest{}
}

// NewListenToServiceDeleteEventBadRequest creates ListenToServiceDeleteEventBadRequestRaw with default headers values
func NewListenToServiceDeleteEventBadRequestRaw() *ListenToServiceDeleteEventBadRequestRaw {

	return &ListenToServiceDeleteEventBadRequestRaw{}
}

// WithPayload adds the payload to the listen to service delete event bad request response
func (o *ListenToServiceDeleteEventBadRequest) WithPayload(payload *models2.Error) *ListenToServiceDeleteEventBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service delete event bad request response
func (o *ListenToServiceDeleteEventBadRequestRaw) WithPayload(payload interface{}) *ListenToServiceDeleteEventBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service delete event bad request response
func (o *ListenToServiceDeleteEventBadRequest) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceDeleteEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceDeleteEventBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceDeleteEventUnauthorizedCode is the HTTP code returned for type ListenToServiceDeleteEventUnauthorized
const ListenToServiceDeleteEventUnauthorizedCode int = 401

/*
ListenToServiceDeleteEventUnauthorized Unauthorized

swagger:response listenToServiceDeleteEventUnauthorized
*/
type ListenToServiceDeleteEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceDeleteEventUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceDeleteEventUnauthorized creates ListenToServiceDeleteEventUnauthorized with default headers values
func NewListenToServiceDeleteEventUnauthorized() *ListenToServiceDeleteEventUnauthorized {

	return &ListenToServiceDeleteEventUnauthorized{}
}

// NewListenToServiceDeleteEventUnauthorized creates ListenToServiceDeleteEventUnauthorizedRaw with default headers values
func NewListenToServiceDeleteEventUnauthorizedRaw() *ListenToServiceDeleteEventUnauthorizedRaw {

	return &ListenToServiceDeleteEventUnauthorizedRaw{}
}

// WithPayload adds the payload to the listen to service delete event unauthorized response
func (o *ListenToServiceDeleteEventUnauthorized) WithPayload(payload *models2.Error) *ListenToServiceDeleteEventUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service delete event unauthorized response
func (o *ListenToServiceDeleteEventUnauthorizedRaw) WithPayload(payload interface{}) *ListenToServiceDeleteEventUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service delete event unauthorized response
func (o *ListenToServiceDeleteEventUnauthorized) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceDeleteEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceDeleteEventUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceDeleteEventForbiddenCode is the HTTP code returned for type ListenToServiceDeleteEventForbidden
const ListenToServiceDeleteEventForbiddenCode int = 403

/*
ListenToServiceDeleteEventForbidden Forbidden

swagger:response listenToServiceDeleteEventForbidden
*/
type ListenToServiceDeleteEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceDeleteEventForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceDeleteEventForbidden creates ListenToServiceDeleteEventForbidden with default headers values
func NewListenToServiceDeleteEventForbidden() *ListenToServiceDeleteEventForbidden {

	return &ListenToServiceDeleteEventForbidden{}
}

// NewListenToServiceDeleteEventForbidden creates ListenToServiceDeleteEventForbiddenRaw with default headers values
func NewListenToServiceDeleteEventForbiddenRaw() *ListenToServiceDeleteEventForbiddenRaw {

	return &ListenToServiceDeleteEventForbiddenRaw{}
}

// WithPayload adds the payload to the listen to service delete event forbidden response
func (o *ListenToServiceDeleteEventForbidden) WithPayload(payload *models2.Error) *ListenToServiceDeleteEventForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service delete event forbidden response
func (o *ListenToServiceDeleteEventForbiddenRaw) WithPayload(payload interface{}) *ListenToServiceDeleteEventForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service delete event forbidden response
func (o *ListenToServiceDeleteEventForbidden) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceDeleteEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceDeleteEventForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceDeleteEventNotFoundCode is the HTTP code returned for type ListenToServiceDeleteEventNotFound
const ListenToServiceDeleteEventNotFoundCode int = 404

/*
ListenToServiceDeleteEventNotFound Not Found

swagger:response listenToServiceDeleteEventNotFound
*/
type ListenToServiceDeleteEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceDeleteEventNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceDeleteEventNotFound creates ListenToServiceDeleteEventNotFound with default headers values
func NewListenToServiceDeleteEventNotFound() *ListenToServiceDeleteEventNotFound {

	return &ListenToServiceDeleteEventNotFound{}
}

// NewListenToServiceDeleteEventNotFound creates ListenToServiceDeleteEventNotFoundRaw with default headers values
func NewListenToServiceDeleteEventNotFoundRaw() *ListenToServiceDeleteEventNotFoundRaw {

	return &ListenToServiceDeleteEventNotFoundRaw{}
}

// WithPayload adds the payload to the listen to service delete event not found response
func (o *ListenToServiceDeleteEventNotFound) WithPayload(payload *models2.Error) *ListenToServiceDeleteEventNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service delete event not found response
func (o *ListenToServiceDeleteEventNotFoundRaw) WithPayload(payload interface{}) *ListenToServiceDeleteEventNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service delete event not found response
func (o *ListenToServiceDeleteEventNotFound) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceDeleteEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceDeleteEventNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceDeleteEventMethodNotAllowedCode is the HTTP code returned for type ListenToServiceDeleteEventMethodNotAllowed
const ListenToServiceDeleteEventMethodNotAllowedCode int = 405

/*
ListenToServiceDeleteEventMethodNotAllowed Method Not allowed

swagger:response listenToServiceDeleteEventMethodNotAllowed
*/
type ListenToServiceDeleteEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceDeleteEventMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceDeleteEventMethodNotAllowed creates ListenToServiceDeleteEventMethodNotAllowed with default headers values
func NewListenToServiceDeleteEventMethodNotAllowed() *ListenToServiceDeleteEventMethodNotAllowed {

	return &ListenToServiceDeleteEventMethodNotAllowed{}
}

// NewListenToServiceDeleteEventMethodNotAllowed creates ListenToServiceDeleteEventMethodNotAllowedRaw with default headers values
func NewListenToServiceDeleteEventMethodNotAllowedRaw() *ListenToServiceDeleteEventMethodNotAllowedRaw {

	return &ListenToServiceDeleteEventMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the listen to service delete event method not allowed response
func (o *ListenToServiceDeleteEventMethodNotAllowed) WithPayload(payload *models2.Error) *ListenToServiceDeleteEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service delete event method not allowed response
func (o *ListenToServiceDeleteEventMethodNotAllowedRaw) WithPayload(payload interface{}) *ListenToServiceDeleteEventMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service delete event method not allowed response
func (o *ListenToServiceDeleteEventMethodNotAllowed) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceDeleteEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceDeleteEventMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceDeleteEventConflictCode is the HTTP code returned for type ListenToServiceDeleteEventConflict
const ListenToServiceDeleteEventConflictCode int = 409

/*
ListenToServiceDeleteEventConflict Conflict

swagger:response listenToServiceDeleteEventConflict
*/
type ListenToServiceDeleteEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceDeleteEventConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceDeleteEventConflict creates ListenToServiceDeleteEventConflict with default headers values
func NewListenToServiceDeleteEventConflict() *ListenToServiceDeleteEventConflict {

	return &ListenToServiceDeleteEventConflict{}
}

// NewListenToServiceDeleteEventConflict creates ListenToServiceDeleteEventConflictRaw with default headers values
func NewListenToServiceDeleteEventConflictRaw() *ListenToServiceDeleteEventConflictRaw {

	return &ListenToServiceDeleteEventConflictRaw{}
}

// WithPayload adds the payload to the listen to service delete event conflict response
func (o *ListenToServiceDeleteEventConflict) WithPayload(payload *models2.Error) *ListenToServiceDeleteEventConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service delete event conflict response
func (o *ListenToServiceDeleteEventConflictRaw) WithPayload(payload interface{}) *ListenToServiceDeleteEventConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service delete event conflict response
func (o *ListenToServiceDeleteEventConflict) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceDeleteEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceDeleteEventConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceDeleteEventInternalServerErrorCode is the HTTP code returned for type ListenToServiceDeleteEventInternalServerError
const ListenToServiceDeleteEventInternalServerErrorCode int = 500

/*
ListenToServiceDeleteEventInternalServerError Internal Server Error

swagger:response listenToServiceDeleteEventInternalServerError
*/
type ListenToServiceDeleteEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceDeleteEventInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceDeleteEventInternalServerError creates ListenToServiceDeleteEventInternalServerError with default headers values
func NewListenToServiceDeleteEventInternalServerError() *ListenToServiceDeleteEventInternalServerError {

	return &ListenToServiceDeleteEventInternalServerError{}
}

// NewListenToServiceDeleteEventInternalServerError creates ListenToServiceDeleteEventInternalServerErrorRaw with default headers values
func NewListenToServiceDeleteEventInternalServerErrorRaw() *ListenToServiceDeleteEventInternalServerErrorRaw {

	return &ListenToServiceDeleteEventInternalServerErrorRaw{}
}

// WithPayload adds the payload to the listen to service delete event internal server error response
func (o *ListenToServiceDeleteEventInternalServerError) WithPayload(payload *models2.Error) *ListenToServiceDeleteEventInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service delete event internal server error response
func (o *ListenToServiceDeleteEventInternalServerErrorRaw) WithPayload(payload interface{}) *ListenToServiceDeleteEventInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service delete event internal server error response
func (o *ListenToServiceDeleteEventInternalServerError) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceDeleteEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceDeleteEventInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
