// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListServiceHandlerFunc turns a function with the right signature into a list service handler
type ListServiceHandlerFunc func(ListServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListServiceHandlerFunc) Handle(params ListServiceParams) middleware.Responder {
	return fn(params)
}

// ListServiceHandler interface for that can handle valid list service params
type ListServiceHandler interface {
	Handle(ListServiceParams) middleware.Responder
}

// NewListService creates a new http.Handler for the list service operation
func NewListService(ctx *middleware.Context, handler ListServiceHandler) *ListService {
	return &ListService{Context: ctx, Handler: handler}
}

/*
	ListService swagger:route GET /service service listService

# List or find Service objects

This operation list or find Service entities
*/
type ListService struct {
	Context *middleware.Context
	Handler ListServiceHandler
}

func (o *ListService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListServiceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
