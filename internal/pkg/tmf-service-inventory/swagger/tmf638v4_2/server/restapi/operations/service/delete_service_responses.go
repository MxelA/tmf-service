// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/models"
	"net/http"

	"github.com/go-openapi/runtime"
)

// Alex Server response
// DeleteServiceNoContentCode is the HTTP code returned for type DeleteServiceNoContent
const DeleteServiceNoContentCode int = 204

/*
DeleteServiceNoContent Deleted

swagger:response deleteServiceNoContent
*/
type DeleteServiceNoContent struct {
}

type DeleteServiceNoContentRaw struct {
}

// NewDeleteServiceNoContent creates DeleteServiceNoContent with default headers values
func NewDeleteServiceNoContent() *DeleteServiceNoContent {

	return &DeleteServiceNoContent{}
}

// NewDeleteServiceNoContent creates DeleteServiceNoContentRaw with default headers values
func NewDeleteServiceNoContentRaw() *DeleteServiceNoContentRaw {

	return &DeleteServiceNoContentRaw{}
}

// WriteResponse to the client
func (o *DeleteServiceNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// WriteResponseRaw to the client
func (o *DeleteServiceNoContentRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// Alex Server response
// DeleteServiceBadRequestCode is the HTTP code returned for type DeleteServiceBadRequest
const DeleteServiceBadRequestCode int = 400

/*
DeleteServiceBadRequest Bad Request

swagger:response deleteServiceBadRequest
*/
type DeleteServiceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type DeleteServiceBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeleteServiceBadRequest creates DeleteServiceBadRequest with default headers values
func NewDeleteServiceBadRequest() *DeleteServiceBadRequest {

	return &DeleteServiceBadRequest{}
}

// NewDeleteServiceBadRequest creates DeleteServiceBadRequestRaw with default headers values
func NewDeleteServiceBadRequestRaw() *DeleteServiceBadRequestRaw {

	return &DeleteServiceBadRequestRaw{}
}

// WithPayload adds the payload to the delete service bad request response
func (o *DeleteServiceBadRequest) WithPayload(payload *models.Error) *DeleteServiceBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the delete service bad request response
func (o *DeleteServiceBadRequestRaw) WithPayload(payload interface{}) *DeleteServiceBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service bad request response
func (o *DeleteServiceBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *DeleteServiceBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// DeleteServiceUnauthorizedCode is the HTTP code returned for type DeleteServiceUnauthorized
const DeleteServiceUnauthorizedCode int = 401

/*
DeleteServiceUnauthorized Unauthorized

swagger:response deleteServiceUnauthorized
*/
type DeleteServiceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type DeleteServiceUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeleteServiceUnauthorized creates DeleteServiceUnauthorized with default headers values
func NewDeleteServiceUnauthorized() *DeleteServiceUnauthorized {

	return &DeleteServiceUnauthorized{}
}

// NewDeleteServiceUnauthorized creates DeleteServiceUnauthorizedRaw with default headers values
func NewDeleteServiceUnauthorizedRaw() *DeleteServiceUnauthorizedRaw {

	return &DeleteServiceUnauthorizedRaw{}
}

// WithPayload adds the payload to the delete service unauthorized response
func (o *DeleteServiceUnauthorized) WithPayload(payload *models.Error) *DeleteServiceUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the delete service unauthorized response
func (o *DeleteServiceUnauthorizedRaw) WithPayload(payload interface{}) *DeleteServiceUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service unauthorized response
func (o *DeleteServiceUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *DeleteServiceUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// DeleteServiceForbiddenCode is the HTTP code returned for type DeleteServiceForbidden
const DeleteServiceForbiddenCode int = 403

/*
DeleteServiceForbidden Forbidden

swagger:response deleteServiceForbidden
*/
type DeleteServiceForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type DeleteServiceForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeleteServiceForbidden creates DeleteServiceForbidden with default headers values
func NewDeleteServiceForbidden() *DeleteServiceForbidden {

	return &DeleteServiceForbidden{}
}

// NewDeleteServiceForbidden creates DeleteServiceForbiddenRaw with default headers values
func NewDeleteServiceForbiddenRaw() *DeleteServiceForbiddenRaw {

	return &DeleteServiceForbiddenRaw{}
}

// WithPayload adds the payload to the delete service forbidden response
func (o *DeleteServiceForbidden) WithPayload(payload *models.Error) *DeleteServiceForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the delete service forbidden response
func (o *DeleteServiceForbiddenRaw) WithPayload(payload interface{}) *DeleteServiceForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service forbidden response
func (o *DeleteServiceForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *DeleteServiceForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// DeleteServiceNotFoundCode is the HTTP code returned for type DeleteServiceNotFound
const DeleteServiceNotFoundCode int = 404

/*
DeleteServiceNotFound Not Found

swagger:response deleteServiceNotFound
*/
type DeleteServiceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type DeleteServiceNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeleteServiceNotFound creates DeleteServiceNotFound with default headers values
func NewDeleteServiceNotFound() *DeleteServiceNotFound {

	return &DeleteServiceNotFound{}
}

// NewDeleteServiceNotFound creates DeleteServiceNotFoundRaw with default headers values
func NewDeleteServiceNotFoundRaw() *DeleteServiceNotFoundRaw {

	return &DeleteServiceNotFoundRaw{}
}

// WithPayload adds the payload to the delete service not found response
func (o *DeleteServiceNotFound) WithPayload(payload *models.Error) *DeleteServiceNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the delete service not found response
func (o *DeleteServiceNotFoundRaw) WithPayload(payload interface{}) *DeleteServiceNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service not found response
func (o *DeleteServiceNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *DeleteServiceNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// DeleteServiceMethodNotAllowedCode is the HTTP code returned for type DeleteServiceMethodNotAllowed
const DeleteServiceMethodNotAllowedCode int = 405

/*
DeleteServiceMethodNotAllowed Method Not allowed

swagger:response deleteServiceMethodNotAllowed
*/
type DeleteServiceMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type DeleteServiceMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeleteServiceMethodNotAllowed creates DeleteServiceMethodNotAllowed with default headers values
func NewDeleteServiceMethodNotAllowed() *DeleteServiceMethodNotAllowed {

	return &DeleteServiceMethodNotAllowed{}
}

// NewDeleteServiceMethodNotAllowed creates DeleteServiceMethodNotAllowedRaw with default headers values
func NewDeleteServiceMethodNotAllowedRaw() *DeleteServiceMethodNotAllowedRaw {

	return &DeleteServiceMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the delete service method not allowed response
func (o *DeleteServiceMethodNotAllowed) WithPayload(payload *models.Error) *DeleteServiceMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the delete service method not allowed response
func (o *DeleteServiceMethodNotAllowedRaw) WithPayload(payload interface{}) *DeleteServiceMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service method not allowed response
func (o *DeleteServiceMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *DeleteServiceMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// DeleteServiceConflictCode is the HTTP code returned for type DeleteServiceConflict
const DeleteServiceConflictCode int = 409

/*
DeleteServiceConflict Conflict

swagger:response deleteServiceConflict
*/
type DeleteServiceConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type DeleteServiceConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeleteServiceConflict creates DeleteServiceConflict with default headers values
func NewDeleteServiceConflict() *DeleteServiceConflict {

	return &DeleteServiceConflict{}
}

// NewDeleteServiceConflict creates DeleteServiceConflictRaw with default headers values
func NewDeleteServiceConflictRaw() *DeleteServiceConflictRaw {

	return &DeleteServiceConflictRaw{}
}

// WithPayload adds the payload to the delete service conflict response
func (o *DeleteServiceConflict) WithPayload(payload *models.Error) *DeleteServiceConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the delete service conflict response
func (o *DeleteServiceConflictRaw) WithPayload(payload interface{}) *DeleteServiceConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service conflict response
func (o *DeleteServiceConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *DeleteServiceConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// DeleteServiceInternalServerErrorCode is the HTTP code returned for type DeleteServiceInternalServerError
const DeleteServiceInternalServerErrorCode int = 500

/*
DeleteServiceInternalServerError Internal Server Error

swagger:response deleteServiceInternalServerError
*/
type DeleteServiceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type DeleteServiceInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDeleteServiceInternalServerError creates DeleteServiceInternalServerError with default headers values
func NewDeleteServiceInternalServerError() *DeleteServiceInternalServerError {

	return &DeleteServiceInternalServerError{}
}

// NewDeleteServiceInternalServerError creates DeleteServiceInternalServerErrorRaw with default headers values
func NewDeleteServiceInternalServerErrorRaw() *DeleteServiceInternalServerErrorRaw {

	return &DeleteServiceInternalServerErrorRaw{}
}

// WithPayload adds the payload to the delete service internal server error response
func (o *DeleteServiceInternalServerError) WithPayload(payload *models.Error) *DeleteServiceInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the delete service internal server error response
func (o *DeleteServiceInternalServerErrorRaw) WithPayload(payload interface{}) *DeleteServiceInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete service internal server error response
func (o *DeleteServiceInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteServiceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *DeleteServiceInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
