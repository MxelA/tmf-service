// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	models2 "github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/models"
	"net/http"

	"github.com/go-openapi/runtime"
)

// Alex Server response
// ListenToServiceCreateEventCreatedCode is the HTTP code returned for type ListenToServiceCreateEventCreated
const ListenToServiceCreateEventCreatedCode int = 201

/*
ListenToServiceCreateEventCreated Notified

swagger:response listenToServiceCreateEventCreated
*/
type ListenToServiceCreateEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models2.EventSubscription `json:"body,omitempty"`
}

type ListenToServiceCreateEventCreatedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceCreateEventCreated creates ListenToServiceCreateEventCreated with default headers values
func NewListenToServiceCreateEventCreated() *ListenToServiceCreateEventCreated {

	return &ListenToServiceCreateEventCreated{}
}

// NewListenToServiceCreateEventCreated creates ListenToServiceCreateEventCreatedRaw with default headers values
func NewListenToServiceCreateEventCreatedRaw() *ListenToServiceCreateEventCreatedRaw {

	return &ListenToServiceCreateEventCreatedRaw{}
}

// WithPayload adds the payload to the listen to service create event created response
func (o *ListenToServiceCreateEventCreated) WithPayload(payload *models2.EventSubscription) *ListenToServiceCreateEventCreated {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service create event created response
func (o *ListenToServiceCreateEventCreatedRaw) WithPayload(payload interface{}) *ListenToServiceCreateEventCreatedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service create event created response
func (o *ListenToServiceCreateEventCreated) SetPayload(payload *models2.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceCreateEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceCreateEventCreatedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceCreateEventBadRequestCode is the HTTP code returned for type ListenToServiceCreateEventBadRequest
const ListenToServiceCreateEventBadRequestCode int = 400

/*
ListenToServiceCreateEventBadRequest Bad Request

swagger:response listenToServiceCreateEventBadRequest
*/
type ListenToServiceCreateEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceCreateEventBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceCreateEventBadRequest creates ListenToServiceCreateEventBadRequest with default headers values
func NewListenToServiceCreateEventBadRequest() *ListenToServiceCreateEventBadRequest {

	return &ListenToServiceCreateEventBadRequest{}
}

// NewListenToServiceCreateEventBadRequest creates ListenToServiceCreateEventBadRequestRaw with default headers values
func NewListenToServiceCreateEventBadRequestRaw() *ListenToServiceCreateEventBadRequestRaw {

	return &ListenToServiceCreateEventBadRequestRaw{}
}

// WithPayload adds the payload to the listen to service create event bad request response
func (o *ListenToServiceCreateEventBadRequest) WithPayload(payload *models2.Error) *ListenToServiceCreateEventBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service create event bad request response
func (o *ListenToServiceCreateEventBadRequestRaw) WithPayload(payload interface{}) *ListenToServiceCreateEventBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service create event bad request response
func (o *ListenToServiceCreateEventBadRequest) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceCreateEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceCreateEventBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceCreateEventUnauthorizedCode is the HTTP code returned for type ListenToServiceCreateEventUnauthorized
const ListenToServiceCreateEventUnauthorizedCode int = 401

/*
ListenToServiceCreateEventUnauthorized Unauthorized

swagger:response listenToServiceCreateEventUnauthorized
*/
type ListenToServiceCreateEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceCreateEventUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceCreateEventUnauthorized creates ListenToServiceCreateEventUnauthorized with default headers values
func NewListenToServiceCreateEventUnauthorized() *ListenToServiceCreateEventUnauthorized {

	return &ListenToServiceCreateEventUnauthorized{}
}

// NewListenToServiceCreateEventUnauthorized creates ListenToServiceCreateEventUnauthorizedRaw with default headers values
func NewListenToServiceCreateEventUnauthorizedRaw() *ListenToServiceCreateEventUnauthorizedRaw {

	return &ListenToServiceCreateEventUnauthorizedRaw{}
}

// WithPayload adds the payload to the listen to service create event unauthorized response
func (o *ListenToServiceCreateEventUnauthorized) WithPayload(payload *models2.Error) *ListenToServiceCreateEventUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service create event unauthorized response
func (o *ListenToServiceCreateEventUnauthorizedRaw) WithPayload(payload interface{}) *ListenToServiceCreateEventUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service create event unauthorized response
func (o *ListenToServiceCreateEventUnauthorized) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceCreateEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceCreateEventUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceCreateEventForbiddenCode is the HTTP code returned for type ListenToServiceCreateEventForbidden
const ListenToServiceCreateEventForbiddenCode int = 403

/*
ListenToServiceCreateEventForbidden Forbidden

swagger:response listenToServiceCreateEventForbidden
*/
type ListenToServiceCreateEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceCreateEventForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceCreateEventForbidden creates ListenToServiceCreateEventForbidden with default headers values
func NewListenToServiceCreateEventForbidden() *ListenToServiceCreateEventForbidden {

	return &ListenToServiceCreateEventForbidden{}
}

// NewListenToServiceCreateEventForbidden creates ListenToServiceCreateEventForbiddenRaw with default headers values
func NewListenToServiceCreateEventForbiddenRaw() *ListenToServiceCreateEventForbiddenRaw {

	return &ListenToServiceCreateEventForbiddenRaw{}
}

// WithPayload adds the payload to the listen to service create event forbidden response
func (o *ListenToServiceCreateEventForbidden) WithPayload(payload *models2.Error) *ListenToServiceCreateEventForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service create event forbidden response
func (o *ListenToServiceCreateEventForbiddenRaw) WithPayload(payload interface{}) *ListenToServiceCreateEventForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service create event forbidden response
func (o *ListenToServiceCreateEventForbidden) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceCreateEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceCreateEventForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceCreateEventNotFoundCode is the HTTP code returned for type ListenToServiceCreateEventNotFound
const ListenToServiceCreateEventNotFoundCode int = 404

/*
ListenToServiceCreateEventNotFound Not Found

swagger:response listenToServiceCreateEventNotFound
*/
type ListenToServiceCreateEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceCreateEventNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceCreateEventNotFound creates ListenToServiceCreateEventNotFound with default headers values
func NewListenToServiceCreateEventNotFound() *ListenToServiceCreateEventNotFound {

	return &ListenToServiceCreateEventNotFound{}
}

// NewListenToServiceCreateEventNotFound creates ListenToServiceCreateEventNotFoundRaw with default headers values
func NewListenToServiceCreateEventNotFoundRaw() *ListenToServiceCreateEventNotFoundRaw {

	return &ListenToServiceCreateEventNotFoundRaw{}
}

// WithPayload adds the payload to the listen to service create event not found response
func (o *ListenToServiceCreateEventNotFound) WithPayload(payload *models2.Error) *ListenToServiceCreateEventNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service create event not found response
func (o *ListenToServiceCreateEventNotFoundRaw) WithPayload(payload interface{}) *ListenToServiceCreateEventNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service create event not found response
func (o *ListenToServiceCreateEventNotFound) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceCreateEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceCreateEventNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceCreateEventMethodNotAllowedCode is the HTTP code returned for type ListenToServiceCreateEventMethodNotAllowed
const ListenToServiceCreateEventMethodNotAllowedCode int = 405

/*
ListenToServiceCreateEventMethodNotAllowed Method Not allowed

swagger:response listenToServiceCreateEventMethodNotAllowed
*/
type ListenToServiceCreateEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceCreateEventMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceCreateEventMethodNotAllowed creates ListenToServiceCreateEventMethodNotAllowed with default headers values
func NewListenToServiceCreateEventMethodNotAllowed() *ListenToServiceCreateEventMethodNotAllowed {

	return &ListenToServiceCreateEventMethodNotAllowed{}
}

// NewListenToServiceCreateEventMethodNotAllowed creates ListenToServiceCreateEventMethodNotAllowedRaw with default headers values
func NewListenToServiceCreateEventMethodNotAllowedRaw() *ListenToServiceCreateEventMethodNotAllowedRaw {

	return &ListenToServiceCreateEventMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the listen to service create event method not allowed response
func (o *ListenToServiceCreateEventMethodNotAllowed) WithPayload(payload *models2.Error) *ListenToServiceCreateEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service create event method not allowed response
func (o *ListenToServiceCreateEventMethodNotAllowedRaw) WithPayload(payload interface{}) *ListenToServiceCreateEventMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service create event method not allowed response
func (o *ListenToServiceCreateEventMethodNotAllowed) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceCreateEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceCreateEventMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceCreateEventConflictCode is the HTTP code returned for type ListenToServiceCreateEventConflict
const ListenToServiceCreateEventConflictCode int = 409

/*
ListenToServiceCreateEventConflict Conflict

swagger:response listenToServiceCreateEventConflict
*/
type ListenToServiceCreateEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceCreateEventConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceCreateEventConflict creates ListenToServiceCreateEventConflict with default headers values
func NewListenToServiceCreateEventConflict() *ListenToServiceCreateEventConflict {

	return &ListenToServiceCreateEventConflict{}
}

// NewListenToServiceCreateEventConflict creates ListenToServiceCreateEventConflictRaw with default headers values
func NewListenToServiceCreateEventConflictRaw() *ListenToServiceCreateEventConflictRaw {

	return &ListenToServiceCreateEventConflictRaw{}
}

// WithPayload adds the payload to the listen to service create event conflict response
func (o *ListenToServiceCreateEventConflict) WithPayload(payload *models2.Error) *ListenToServiceCreateEventConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service create event conflict response
func (o *ListenToServiceCreateEventConflictRaw) WithPayload(payload interface{}) *ListenToServiceCreateEventConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service create event conflict response
func (o *ListenToServiceCreateEventConflict) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceCreateEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceCreateEventConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceCreateEventInternalServerErrorCode is the HTTP code returned for type ListenToServiceCreateEventInternalServerError
const ListenToServiceCreateEventInternalServerErrorCode int = 500

/*
ListenToServiceCreateEventInternalServerError Internal Server Error

swagger:response listenToServiceCreateEventInternalServerError
*/
type ListenToServiceCreateEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type ListenToServiceCreateEventInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceCreateEventInternalServerError creates ListenToServiceCreateEventInternalServerError with default headers values
func NewListenToServiceCreateEventInternalServerError() *ListenToServiceCreateEventInternalServerError {

	return &ListenToServiceCreateEventInternalServerError{}
}

// NewListenToServiceCreateEventInternalServerError creates ListenToServiceCreateEventInternalServerErrorRaw with default headers values
func NewListenToServiceCreateEventInternalServerErrorRaw() *ListenToServiceCreateEventInternalServerErrorRaw {

	return &ListenToServiceCreateEventInternalServerErrorRaw{}
}

// WithPayload adds the payload to the listen to service create event internal server error response
func (o *ListenToServiceCreateEventInternalServerError) WithPayload(payload *models2.Error) *ListenToServiceCreateEventInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service create event internal server error response
func (o *ListenToServiceCreateEventInternalServerErrorRaw) WithPayload(payload interface{}) *ListenToServiceCreateEventInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service create event internal server error response
func (o *ListenToServiceCreateEventInternalServerError) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceCreateEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceCreateEventInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
