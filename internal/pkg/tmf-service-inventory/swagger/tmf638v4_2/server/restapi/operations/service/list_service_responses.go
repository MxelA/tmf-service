// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/models"
)

// Alex Server response
// ListServiceOKCode is the HTTP code returned for type ListServiceOK
const ListServiceOKCode int = 200

/*
ListServiceOK Success

swagger:response listServiceOK
*/
type ListServiceOK struct {
	/*Actual number of items returned in the response body

	 */
	XResultCount int64 `json:"X-Result-Count"`
	/*Total number of items matching criteria

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Service `json:"body,omitempty"`
}

type ListServiceOKRaw struct {
	/*Actual number of items returned in the response body

	 */
	XResultCount int64 `json:"X-Result-Count"`
	/*Total number of items matching criteria

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListServiceOK creates ListServiceOK with default headers values
func NewListServiceOK() *ListServiceOK {

	return &ListServiceOK{}
}

// NewListServiceOK creates ListServiceOKRaw with default headers values
func NewListServiceOKRaw() *ListServiceOKRaw {

	return &ListServiceOKRaw{}
}

// WithXResultCount adds the xResultCount to the list service o k response
func (o *ListServiceOK) WithXResultCount(xResultCount int64) *ListServiceOK {
	o.XResultCount = xResultCount
	return o
}

// SetXResultCount sets the xResultCount to the list service o k response
func (o *ListServiceOK) SetXResultCount(xResultCount int64) {
	o.XResultCount = xResultCount
}

// WithXTotalCount adds the xTotalCount to the list service o k response
func (o *ListServiceOK) WithXTotalCount(xTotalCount int64) *ListServiceOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list service o k response
func (o *ListServiceOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list service o k response
func (o *ListServiceOK) WithPayload(payload []*models.Service) *ListServiceOK {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the list service o k response
func (o *ListServiceOKRaw) WithPayload(payload interface{}) *ListServiceOKRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service o k response
func (o *ListServiceOK) SetPayload(payload []*models.Service) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Result-Count

	xResultCount := swag.FormatInt64(o.XResultCount)
	if xResultCount != "" {
		rw.Header().Set("X-Result-Count", xResultCount)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Service, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// WriteResponseRaw to the client
func (o *ListServiceOKRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Result-Count

	xResultCount := swag.FormatInt64(o.XResultCount)
	if xResultCount != "" {
		rw.Header().Set("X-Result-Count", xResultCount)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Service, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// Alex Server response
// ListServiceBadRequestCode is the HTTP code returned for type ListServiceBadRequest
const ListServiceBadRequestCode int = 400

/*
ListServiceBadRequest Bad Request

swagger:response listServiceBadRequest
*/
type ListServiceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListServiceBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListServiceBadRequest creates ListServiceBadRequest with default headers values
func NewListServiceBadRequest() *ListServiceBadRequest {

	return &ListServiceBadRequest{}
}

// NewListServiceBadRequest creates ListServiceBadRequestRaw with default headers values
func NewListServiceBadRequestRaw() *ListServiceBadRequestRaw {

	return &ListServiceBadRequestRaw{}
}

// WithPayload adds the payload to the list service bad request response
func (o *ListServiceBadRequest) WithPayload(payload *models.Error) *ListServiceBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the list service bad request response
func (o *ListServiceBadRequestRaw) WithPayload(payload interface{}) *ListServiceBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service bad request response
func (o *ListServiceBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListServiceBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListServiceUnauthorizedCode is the HTTP code returned for type ListServiceUnauthorized
const ListServiceUnauthorizedCode int = 401

/*
ListServiceUnauthorized Unauthorized

swagger:response listServiceUnauthorized
*/
type ListServiceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListServiceUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListServiceUnauthorized creates ListServiceUnauthorized with default headers values
func NewListServiceUnauthorized() *ListServiceUnauthorized {

	return &ListServiceUnauthorized{}
}

// NewListServiceUnauthorized creates ListServiceUnauthorizedRaw with default headers values
func NewListServiceUnauthorizedRaw() *ListServiceUnauthorizedRaw {

	return &ListServiceUnauthorizedRaw{}
}

// WithPayload adds the payload to the list service unauthorized response
func (o *ListServiceUnauthorized) WithPayload(payload *models.Error) *ListServiceUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the list service unauthorized response
func (o *ListServiceUnauthorizedRaw) WithPayload(payload interface{}) *ListServiceUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service unauthorized response
func (o *ListServiceUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListServiceUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListServiceForbiddenCode is the HTTP code returned for type ListServiceForbidden
const ListServiceForbiddenCode int = 403

/*
ListServiceForbidden Forbidden

swagger:response listServiceForbidden
*/
type ListServiceForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListServiceForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListServiceForbidden creates ListServiceForbidden with default headers values
func NewListServiceForbidden() *ListServiceForbidden {

	return &ListServiceForbidden{}
}

// NewListServiceForbidden creates ListServiceForbiddenRaw with default headers values
func NewListServiceForbiddenRaw() *ListServiceForbiddenRaw {

	return &ListServiceForbiddenRaw{}
}

// WithPayload adds the payload to the list service forbidden response
func (o *ListServiceForbidden) WithPayload(payload *models.Error) *ListServiceForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the list service forbidden response
func (o *ListServiceForbiddenRaw) WithPayload(payload interface{}) *ListServiceForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service forbidden response
func (o *ListServiceForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListServiceForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListServiceNotFoundCode is the HTTP code returned for type ListServiceNotFound
const ListServiceNotFoundCode int = 404

/*
ListServiceNotFound Not Found

swagger:response listServiceNotFound
*/
type ListServiceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListServiceNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListServiceNotFound creates ListServiceNotFound with default headers values
func NewListServiceNotFound() *ListServiceNotFound {

	return &ListServiceNotFound{}
}

// NewListServiceNotFound creates ListServiceNotFoundRaw with default headers values
func NewListServiceNotFoundRaw() *ListServiceNotFoundRaw {

	return &ListServiceNotFoundRaw{}
}

// WithPayload adds the payload to the list service not found response
func (o *ListServiceNotFound) WithPayload(payload *models.Error) *ListServiceNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the list service not found response
func (o *ListServiceNotFoundRaw) WithPayload(payload interface{}) *ListServiceNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service not found response
func (o *ListServiceNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListServiceNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListServiceMethodNotAllowedCode is the HTTP code returned for type ListServiceMethodNotAllowed
const ListServiceMethodNotAllowedCode int = 405

/*
ListServiceMethodNotAllowed Method Not allowed

swagger:response listServiceMethodNotAllowed
*/
type ListServiceMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListServiceMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListServiceMethodNotAllowed creates ListServiceMethodNotAllowed with default headers values
func NewListServiceMethodNotAllowed() *ListServiceMethodNotAllowed {

	return &ListServiceMethodNotAllowed{}
}

// NewListServiceMethodNotAllowed creates ListServiceMethodNotAllowedRaw with default headers values
func NewListServiceMethodNotAllowedRaw() *ListServiceMethodNotAllowedRaw {

	return &ListServiceMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the list service method not allowed response
func (o *ListServiceMethodNotAllowed) WithPayload(payload *models.Error) *ListServiceMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the list service method not allowed response
func (o *ListServiceMethodNotAllowedRaw) WithPayload(payload interface{}) *ListServiceMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service method not allowed response
func (o *ListServiceMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListServiceMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListServiceConflictCode is the HTTP code returned for type ListServiceConflict
const ListServiceConflictCode int = 409

/*
ListServiceConflict Conflict

swagger:response listServiceConflict
*/
type ListServiceConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListServiceConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListServiceConflict creates ListServiceConflict with default headers values
func NewListServiceConflict() *ListServiceConflict {

	return &ListServiceConflict{}
}

// NewListServiceConflict creates ListServiceConflictRaw with default headers values
func NewListServiceConflictRaw() *ListServiceConflictRaw {

	return &ListServiceConflictRaw{}
}

// WithPayload adds the payload to the list service conflict response
func (o *ListServiceConflict) WithPayload(payload *models.Error) *ListServiceConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the list service conflict response
func (o *ListServiceConflictRaw) WithPayload(payload interface{}) *ListServiceConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service conflict response
func (o *ListServiceConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListServiceConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListServiceInternalServerErrorCode is the HTTP code returned for type ListServiceInternalServerError
const ListServiceInternalServerErrorCode int = 500

/*
ListServiceInternalServerError Internal Server Error

swagger:response listServiceInternalServerError
*/
type ListServiceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListServiceInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListServiceInternalServerError creates ListServiceInternalServerError with default headers values
func NewListServiceInternalServerError() *ListServiceInternalServerError {

	return &ListServiceInternalServerError{}
}

// NewListServiceInternalServerError creates ListServiceInternalServerErrorRaw with default headers values
func NewListServiceInternalServerErrorRaw() *ListServiceInternalServerErrorRaw {

	return &ListServiceInternalServerErrorRaw{}
}

// WithPayload adds the payload to the list service internal server error response
func (o *ListServiceInternalServerError) WithPayload(payload *models.Error) *ListServiceInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the list service internal server error response
func (o *ListServiceInternalServerErrorRaw) WithPayload(payload interface{}) *ListServiceInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list service internal server error response
func (o *ListServiceInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListServiceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListServiceInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
