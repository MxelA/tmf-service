// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRetrieveServiceParams creates a new RetrieveServiceParams object
//
// There are no default values defined in the spec.
func NewRetrieveServiceParams() RetrieveServiceParams {

	return RetrieveServiceParams{}
}

// RetrieveServiceParams contains all the bound params for the retrieve service operation
// typically these are obtained from a http.Request
//
// swagger:parameters retrieveService
type RetrieveServiceParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Comma-separated properties to provide in response
	  In: query
	*/
	Fields *string
	/*Requested number of how depth will go in graphLookup
	  In: query
	*/
	GraphLookupDepth *int64
	/*Identifier of the Service
	  Required: true
	  In: path
	*/
	ID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRetrieveServiceParams() beforehand.
func (o *RetrieveServiceParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFields, qhkFields, _ := qs.GetOK("fields")
	if err := o.bindFields(qFields, qhkFields, route.Formats); err != nil {
		res = append(res, err)
	}

	qGraphLookupDepth, qhkGraphLookupDepth, _ := qs.GetOK("graphLookupDepth")
	if err := o.bindGraphLookupDepth(qGraphLookupDepth, qhkGraphLookupDepth, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFields binds and validates parameter Fields from query.
func (o *RetrieveServiceParams) bindFields(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Fields = &raw

	return nil
}

// bindGraphLookupDepth binds and validates parameter GraphLookupDepth from query.
func (o *RetrieveServiceParams) bindGraphLookupDepth(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("graphLookupDepth", "query", "int64", raw)
	}
	o.GraphLookupDepth = &value

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *RetrieveServiceParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}
