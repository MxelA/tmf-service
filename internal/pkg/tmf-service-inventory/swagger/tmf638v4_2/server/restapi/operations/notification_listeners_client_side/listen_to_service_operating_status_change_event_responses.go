// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/models"
)

// Alex Server response
// ListenToServiceOperatingStatusChangeEventCreatedCode is the HTTP code returned for type ListenToServiceOperatingStatusChangeEventCreated
const ListenToServiceOperatingStatusChangeEventCreatedCode int = 201

/*
ListenToServiceOperatingStatusChangeEventCreated Notified

swagger:response listenToServiceOperatingStatusChangeEventCreated
*/
type ListenToServiceOperatingStatusChangeEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

type ListenToServiceOperatingStatusChangeEventCreatedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOperatingStatusChangeEventCreated creates ListenToServiceOperatingStatusChangeEventCreated with default headers values
func NewListenToServiceOperatingStatusChangeEventCreated() *ListenToServiceOperatingStatusChangeEventCreated {

	return &ListenToServiceOperatingStatusChangeEventCreated{}
}

// NewListenToServiceOperatingStatusChangeEventCreated creates ListenToServiceOperatingStatusChangeEventCreatedRaw with default headers values
func NewListenToServiceOperatingStatusChangeEventCreatedRaw() *ListenToServiceOperatingStatusChangeEventCreatedRaw {

	return &ListenToServiceOperatingStatusChangeEventCreatedRaw{}
}

// WithPayload adds the payload to the listen to service operating status change event created response
func (o *ListenToServiceOperatingStatusChangeEventCreated) WithPayload(payload *models.EventSubscription) *ListenToServiceOperatingStatusChangeEventCreated {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service operating status change event created response
func (o *ListenToServiceOperatingStatusChangeEventCreatedRaw) WithPayload(payload interface{}) *ListenToServiceOperatingStatusChangeEventCreatedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service operating status change event created response
func (o *ListenToServiceOperatingStatusChangeEventCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOperatingStatusChangeEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOperatingStatusChangeEventCreatedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOperatingStatusChangeEventBadRequestCode is the HTTP code returned for type ListenToServiceOperatingStatusChangeEventBadRequest
const ListenToServiceOperatingStatusChangeEventBadRequestCode int = 400

/*
ListenToServiceOperatingStatusChangeEventBadRequest Bad Request

swagger:response listenToServiceOperatingStatusChangeEventBadRequest
*/
type ListenToServiceOperatingStatusChangeEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOperatingStatusChangeEventBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOperatingStatusChangeEventBadRequest creates ListenToServiceOperatingStatusChangeEventBadRequest with default headers values
func NewListenToServiceOperatingStatusChangeEventBadRequest() *ListenToServiceOperatingStatusChangeEventBadRequest {

	return &ListenToServiceOperatingStatusChangeEventBadRequest{}
}

// NewListenToServiceOperatingStatusChangeEventBadRequest creates ListenToServiceOperatingStatusChangeEventBadRequestRaw with default headers values
func NewListenToServiceOperatingStatusChangeEventBadRequestRaw() *ListenToServiceOperatingStatusChangeEventBadRequestRaw {

	return &ListenToServiceOperatingStatusChangeEventBadRequestRaw{}
}

// WithPayload adds the payload to the listen to service operating status change event bad request response
func (o *ListenToServiceOperatingStatusChangeEventBadRequest) WithPayload(payload *models.Error) *ListenToServiceOperatingStatusChangeEventBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service operating status change event bad request response
func (o *ListenToServiceOperatingStatusChangeEventBadRequestRaw) WithPayload(payload interface{}) *ListenToServiceOperatingStatusChangeEventBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service operating status change event bad request response
func (o *ListenToServiceOperatingStatusChangeEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOperatingStatusChangeEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOperatingStatusChangeEventBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOperatingStatusChangeEventUnauthorizedCode is the HTTP code returned for type ListenToServiceOperatingStatusChangeEventUnauthorized
const ListenToServiceOperatingStatusChangeEventUnauthorizedCode int = 401

/*
ListenToServiceOperatingStatusChangeEventUnauthorized Unauthorized

swagger:response listenToServiceOperatingStatusChangeEventUnauthorized
*/
type ListenToServiceOperatingStatusChangeEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOperatingStatusChangeEventUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOperatingStatusChangeEventUnauthorized creates ListenToServiceOperatingStatusChangeEventUnauthorized with default headers values
func NewListenToServiceOperatingStatusChangeEventUnauthorized() *ListenToServiceOperatingStatusChangeEventUnauthorized {

	return &ListenToServiceOperatingStatusChangeEventUnauthorized{}
}

// NewListenToServiceOperatingStatusChangeEventUnauthorized creates ListenToServiceOperatingStatusChangeEventUnauthorizedRaw with default headers values
func NewListenToServiceOperatingStatusChangeEventUnauthorizedRaw() *ListenToServiceOperatingStatusChangeEventUnauthorizedRaw {

	return &ListenToServiceOperatingStatusChangeEventUnauthorizedRaw{}
}

// WithPayload adds the payload to the listen to service operating status change event unauthorized response
func (o *ListenToServiceOperatingStatusChangeEventUnauthorized) WithPayload(payload *models.Error) *ListenToServiceOperatingStatusChangeEventUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service operating status change event unauthorized response
func (o *ListenToServiceOperatingStatusChangeEventUnauthorizedRaw) WithPayload(payload interface{}) *ListenToServiceOperatingStatusChangeEventUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service operating status change event unauthorized response
func (o *ListenToServiceOperatingStatusChangeEventUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOperatingStatusChangeEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOperatingStatusChangeEventUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOperatingStatusChangeEventForbiddenCode is the HTTP code returned for type ListenToServiceOperatingStatusChangeEventForbidden
const ListenToServiceOperatingStatusChangeEventForbiddenCode int = 403

/*
ListenToServiceOperatingStatusChangeEventForbidden Forbidden

swagger:response listenToServiceOperatingStatusChangeEventForbidden
*/
type ListenToServiceOperatingStatusChangeEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOperatingStatusChangeEventForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOperatingStatusChangeEventForbidden creates ListenToServiceOperatingStatusChangeEventForbidden with default headers values
func NewListenToServiceOperatingStatusChangeEventForbidden() *ListenToServiceOperatingStatusChangeEventForbidden {

	return &ListenToServiceOperatingStatusChangeEventForbidden{}
}

// NewListenToServiceOperatingStatusChangeEventForbidden creates ListenToServiceOperatingStatusChangeEventForbiddenRaw with default headers values
func NewListenToServiceOperatingStatusChangeEventForbiddenRaw() *ListenToServiceOperatingStatusChangeEventForbiddenRaw {

	return &ListenToServiceOperatingStatusChangeEventForbiddenRaw{}
}

// WithPayload adds the payload to the listen to service operating status change event forbidden response
func (o *ListenToServiceOperatingStatusChangeEventForbidden) WithPayload(payload *models.Error) *ListenToServiceOperatingStatusChangeEventForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service operating status change event forbidden response
func (o *ListenToServiceOperatingStatusChangeEventForbiddenRaw) WithPayload(payload interface{}) *ListenToServiceOperatingStatusChangeEventForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service operating status change event forbidden response
func (o *ListenToServiceOperatingStatusChangeEventForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOperatingStatusChangeEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOperatingStatusChangeEventForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOperatingStatusChangeEventNotFoundCode is the HTTP code returned for type ListenToServiceOperatingStatusChangeEventNotFound
const ListenToServiceOperatingStatusChangeEventNotFoundCode int = 404

/*
ListenToServiceOperatingStatusChangeEventNotFound Not Found

swagger:response listenToServiceOperatingStatusChangeEventNotFound
*/
type ListenToServiceOperatingStatusChangeEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOperatingStatusChangeEventNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOperatingStatusChangeEventNotFound creates ListenToServiceOperatingStatusChangeEventNotFound with default headers values
func NewListenToServiceOperatingStatusChangeEventNotFound() *ListenToServiceOperatingStatusChangeEventNotFound {

	return &ListenToServiceOperatingStatusChangeEventNotFound{}
}

// NewListenToServiceOperatingStatusChangeEventNotFound creates ListenToServiceOperatingStatusChangeEventNotFoundRaw with default headers values
func NewListenToServiceOperatingStatusChangeEventNotFoundRaw() *ListenToServiceOperatingStatusChangeEventNotFoundRaw {

	return &ListenToServiceOperatingStatusChangeEventNotFoundRaw{}
}

// WithPayload adds the payload to the listen to service operating status change event not found response
func (o *ListenToServiceOperatingStatusChangeEventNotFound) WithPayload(payload *models.Error) *ListenToServiceOperatingStatusChangeEventNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service operating status change event not found response
func (o *ListenToServiceOperatingStatusChangeEventNotFoundRaw) WithPayload(payload interface{}) *ListenToServiceOperatingStatusChangeEventNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service operating status change event not found response
func (o *ListenToServiceOperatingStatusChangeEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOperatingStatusChangeEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOperatingStatusChangeEventNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOperatingStatusChangeEventMethodNotAllowedCode is the HTTP code returned for type ListenToServiceOperatingStatusChangeEventMethodNotAllowed
const ListenToServiceOperatingStatusChangeEventMethodNotAllowedCode int = 405

/*
ListenToServiceOperatingStatusChangeEventMethodNotAllowed Method Not allowed

swagger:response listenToServiceOperatingStatusChangeEventMethodNotAllowed
*/
type ListenToServiceOperatingStatusChangeEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOperatingStatusChangeEventMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOperatingStatusChangeEventMethodNotAllowed creates ListenToServiceOperatingStatusChangeEventMethodNotAllowed with default headers values
func NewListenToServiceOperatingStatusChangeEventMethodNotAllowed() *ListenToServiceOperatingStatusChangeEventMethodNotAllowed {

	return &ListenToServiceOperatingStatusChangeEventMethodNotAllowed{}
}

// NewListenToServiceOperatingStatusChangeEventMethodNotAllowed creates ListenToServiceOperatingStatusChangeEventMethodNotAllowedRaw with default headers values
func NewListenToServiceOperatingStatusChangeEventMethodNotAllowedRaw() *ListenToServiceOperatingStatusChangeEventMethodNotAllowedRaw {

	return &ListenToServiceOperatingStatusChangeEventMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the listen to service operating status change event method not allowed response
func (o *ListenToServiceOperatingStatusChangeEventMethodNotAllowed) WithPayload(payload *models.Error) *ListenToServiceOperatingStatusChangeEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service operating status change event method not allowed response
func (o *ListenToServiceOperatingStatusChangeEventMethodNotAllowedRaw) WithPayload(payload interface{}) *ListenToServiceOperatingStatusChangeEventMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service operating status change event method not allowed response
func (o *ListenToServiceOperatingStatusChangeEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOperatingStatusChangeEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOperatingStatusChangeEventMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOperatingStatusChangeEventConflictCode is the HTTP code returned for type ListenToServiceOperatingStatusChangeEventConflict
const ListenToServiceOperatingStatusChangeEventConflictCode int = 409

/*
ListenToServiceOperatingStatusChangeEventConflict Conflict

swagger:response listenToServiceOperatingStatusChangeEventConflict
*/
type ListenToServiceOperatingStatusChangeEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOperatingStatusChangeEventConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOperatingStatusChangeEventConflict creates ListenToServiceOperatingStatusChangeEventConflict with default headers values
func NewListenToServiceOperatingStatusChangeEventConflict() *ListenToServiceOperatingStatusChangeEventConflict {

	return &ListenToServiceOperatingStatusChangeEventConflict{}
}

// NewListenToServiceOperatingStatusChangeEventConflict creates ListenToServiceOperatingStatusChangeEventConflictRaw with default headers values
func NewListenToServiceOperatingStatusChangeEventConflictRaw() *ListenToServiceOperatingStatusChangeEventConflictRaw {

	return &ListenToServiceOperatingStatusChangeEventConflictRaw{}
}

// WithPayload adds the payload to the listen to service operating status change event conflict response
func (o *ListenToServiceOperatingStatusChangeEventConflict) WithPayload(payload *models.Error) *ListenToServiceOperatingStatusChangeEventConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service operating status change event conflict response
func (o *ListenToServiceOperatingStatusChangeEventConflictRaw) WithPayload(payload interface{}) *ListenToServiceOperatingStatusChangeEventConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service operating status change event conflict response
func (o *ListenToServiceOperatingStatusChangeEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOperatingStatusChangeEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOperatingStatusChangeEventConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOperatingStatusChangeEventInternalServerErrorCode is the HTTP code returned for type ListenToServiceOperatingStatusChangeEventInternalServerError
const ListenToServiceOperatingStatusChangeEventInternalServerErrorCode int = 500

/*
ListenToServiceOperatingStatusChangeEventInternalServerError Internal Server Error

swagger:response listenToServiceOperatingStatusChangeEventInternalServerError
*/
type ListenToServiceOperatingStatusChangeEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOperatingStatusChangeEventInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOperatingStatusChangeEventInternalServerError creates ListenToServiceOperatingStatusChangeEventInternalServerError with default headers values
func NewListenToServiceOperatingStatusChangeEventInternalServerError() *ListenToServiceOperatingStatusChangeEventInternalServerError {

	return &ListenToServiceOperatingStatusChangeEventInternalServerError{}
}

// NewListenToServiceOperatingStatusChangeEventInternalServerError creates ListenToServiceOperatingStatusChangeEventInternalServerErrorRaw with default headers values
func NewListenToServiceOperatingStatusChangeEventInternalServerErrorRaw() *ListenToServiceOperatingStatusChangeEventInternalServerErrorRaw {

	return &ListenToServiceOperatingStatusChangeEventInternalServerErrorRaw{}
}

// WithPayload adds the payload to the listen to service operating status change event internal server error response
func (o *ListenToServiceOperatingStatusChangeEventInternalServerError) WithPayload(payload *models.Error) *ListenToServiceOperatingStatusChangeEventInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service operating status change event internal server error response
func (o *ListenToServiceOperatingStatusChangeEventInternalServerErrorRaw) WithPayload(payload interface{}) *ListenToServiceOperatingStatusChangeEventInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service operating status change event internal server error response
func (o *ListenToServiceOperatingStatusChangeEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOperatingStatusChangeEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOperatingStatusChangeEventInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
