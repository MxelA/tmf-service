// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveServiceHandlerFunc turns a function with the right signature into a retrieve service handler
type RetrieveServiceHandlerFunc func(RetrieveServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveServiceHandlerFunc) Handle(params RetrieveServiceParams) middleware.Responder {
	return fn(params)
}

// RetrieveServiceHandler interface for that can handle valid retrieve service params
type RetrieveServiceHandler interface {
	Handle(RetrieveServiceParams) middleware.Responder
}

// NewRetrieveService creates a new http.Handler for the retrieve service operation
func NewRetrieveService(ctx *middleware.Context, handler RetrieveServiceHandler) *RetrieveService {
	return &RetrieveService{Context: ctx, Handler: handler}
}

/*
	RetrieveService swagger:route GET /service/{id} service retrieveService

# Retrieves a Service by ID

This operation retrieves a Service entity. Attribute selection is enabled for all first level attributes.
*/
type RetrieveService struct {
	Context *middleware.Context
	Handler RetrieveServiceHandler
}

func (o *RetrieveService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRetrieveServiceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
