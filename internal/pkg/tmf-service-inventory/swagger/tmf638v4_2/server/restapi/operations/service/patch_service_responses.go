// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	models2 "github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/models"
	"net/http"

	"github.com/go-openapi/runtime"
)

// Alex Server response
// PatchServiceOKCode is the HTTP code returned for type PatchServiceOK
const PatchServiceOKCode int = 200

/*
PatchServiceOK Updated

swagger:response patchServiceOK
*/
type PatchServiceOK struct {

	/*
	  In: Body
	*/
	Payload *models2.Service `json:"body,omitempty"`
}

type PatchServiceOKRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceOK creates PatchServiceOK with default headers values
func NewPatchServiceOK() *PatchServiceOK {

	return &PatchServiceOK{}
}

// NewPatchServiceOK creates PatchServiceOKRaw with default headers values
func NewPatchServiceOKRaw() *PatchServiceOKRaw {

	return &PatchServiceOKRaw{}
}

// WithPayload adds the payload to the patch service o k response
func (o *PatchServiceOK) WithPayload(payload *models2.Service) *PatchServiceOK {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service o k response
func (o *PatchServiceOKRaw) WithPayload(payload interface{}) *PatchServiceOKRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service o k response
func (o *PatchServiceOK) SetPayload(payload *models2.Service) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceOKRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceBadRequestCode is the HTTP code returned for type PatchServiceBadRequest
const PatchServiceBadRequestCode int = 400

/*
PatchServiceBadRequest Bad Request

swagger:response patchServiceBadRequest
*/
type PatchServiceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type PatchServiceBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceBadRequest creates PatchServiceBadRequest with default headers values
func NewPatchServiceBadRequest() *PatchServiceBadRequest {

	return &PatchServiceBadRequest{}
}

// NewPatchServiceBadRequest creates PatchServiceBadRequestRaw with default headers values
func NewPatchServiceBadRequestRaw() *PatchServiceBadRequestRaw {

	return &PatchServiceBadRequestRaw{}
}

// WithPayload adds the payload to the patch service bad request response
func (o *PatchServiceBadRequest) WithPayload(payload *models2.Error) *PatchServiceBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service bad request response
func (o *PatchServiceBadRequestRaw) WithPayload(payload interface{}) *PatchServiceBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service bad request response
func (o *PatchServiceBadRequest) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceUnauthorizedCode is the HTTP code returned for type PatchServiceUnauthorized
const PatchServiceUnauthorizedCode int = 401

/*
PatchServiceUnauthorized Unauthorized

swagger:response patchServiceUnauthorized
*/
type PatchServiceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type PatchServiceUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceUnauthorized creates PatchServiceUnauthorized with default headers values
func NewPatchServiceUnauthorized() *PatchServiceUnauthorized {

	return &PatchServiceUnauthorized{}
}

// NewPatchServiceUnauthorized creates PatchServiceUnauthorizedRaw with default headers values
func NewPatchServiceUnauthorizedRaw() *PatchServiceUnauthorizedRaw {

	return &PatchServiceUnauthorizedRaw{}
}

// WithPayload adds the payload to the patch service unauthorized response
func (o *PatchServiceUnauthorized) WithPayload(payload *models2.Error) *PatchServiceUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service unauthorized response
func (o *PatchServiceUnauthorizedRaw) WithPayload(payload interface{}) *PatchServiceUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service unauthorized response
func (o *PatchServiceUnauthorized) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceForbiddenCode is the HTTP code returned for type PatchServiceForbidden
const PatchServiceForbiddenCode int = 403

/*
PatchServiceForbidden Forbidden

swagger:response patchServiceForbidden
*/
type PatchServiceForbidden struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type PatchServiceForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceForbidden creates PatchServiceForbidden with default headers values
func NewPatchServiceForbidden() *PatchServiceForbidden {

	return &PatchServiceForbidden{}
}

// NewPatchServiceForbidden creates PatchServiceForbiddenRaw with default headers values
func NewPatchServiceForbiddenRaw() *PatchServiceForbiddenRaw {

	return &PatchServiceForbiddenRaw{}
}

// WithPayload adds the payload to the patch service forbidden response
func (o *PatchServiceForbidden) WithPayload(payload *models2.Error) *PatchServiceForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service forbidden response
func (o *PatchServiceForbiddenRaw) WithPayload(payload interface{}) *PatchServiceForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service forbidden response
func (o *PatchServiceForbidden) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceNotFoundCode is the HTTP code returned for type PatchServiceNotFound
const PatchServiceNotFoundCode int = 404

/*
PatchServiceNotFound Not Found

swagger:response patchServiceNotFound
*/
type PatchServiceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type PatchServiceNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceNotFound creates PatchServiceNotFound with default headers values
func NewPatchServiceNotFound() *PatchServiceNotFound {

	return &PatchServiceNotFound{}
}

// NewPatchServiceNotFound creates PatchServiceNotFoundRaw with default headers values
func NewPatchServiceNotFoundRaw() *PatchServiceNotFoundRaw {

	return &PatchServiceNotFoundRaw{}
}

// WithPayload adds the payload to the patch service not found response
func (o *PatchServiceNotFound) WithPayload(payload *models2.Error) *PatchServiceNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service not found response
func (o *PatchServiceNotFoundRaw) WithPayload(payload interface{}) *PatchServiceNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service not found response
func (o *PatchServiceNotFound) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceMethodNotAllowedCode is the HTTP code returned for type PatchServiceMethodNotAllowed
const PatchServiceMethodNotAllowedCode int = 405

/*
PatchServiceMethodNotAllowed Method Not allowed

swagger:response patchServiceMethodNotAllowed
*/
type PatchServiceMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type PatchServiceMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceMethodNotAllowed creates PatchServiceMethodNotAllowed with default headers values
func NewPatchServiceMethodNotAllowed() *PatchServiceMethodNotAllowed {

	return &PatchServiceMethodNotAllowed{}
}

// NewPatchServiceMethodNotAllowed creates PatchServiceMethodNotAllowedRaw with default headers values
func NewPatchServiceMethodNotAllowedRaw() *PatchServiceMethodNotAllowedRaw {

	return &PatchServiceMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the patch service method not allowed response
func (o *PatchServiceMethodNotAllowed) WithPayload(payload *models2.Error) *PatchServiceMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service method not allowed response
func (o *PatchServiceMethodNotAllowedRaw) WithPayload(payload interface{}) *PatchServiceMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service method not allowed response
func (o *PatchServiceMethodNotAllowed) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceConflictCode is the HTTP code returned for type PatchServiceConflict
const PatchServiceConflictCode int = 409

/*
PatchServiceConflict Conflict

swagger:response patchServiceConflict
*/
type PatchServiceConflict struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type PatchServiceConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceConflict creates PatchServiceConflict with default headers values
func NewPatchServiceConflict() *PatchServiceConflict {

	return &PatchServiceConflict{}
}

// NewPatchServiceConflict creates PatchServiceConflictRaw with default headers values
func NewPatchServiceConflictRaw() *PatchServiceConflictRaw {

	return &PatchServiceConflictRaw{}
}

// WithPayload adds the payload to the patch service conflict response
func (o *PatchServiceConflict) WithPayload(payload *models2.Error) *PatchServiceConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service conflict response
func (o *PatchServiceConflictRaw) WithPayload(payload interface{}) *PatchServiceConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service conflict response
func (o *PatchServiceConflict) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceInternalServerErrorCode is the HTTP code returned for type PatchServiceInternalServerError
const PatchServiceInternalServerErrorCode int = 500

/*
PatchServiceInternalServerError Internal Server Error

swagger:response patchServiceInternalServerError
*/
type PatchServiceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type PatchServiceInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceInternalServerError creates PatchServiceInternalServerError with default headers values
func NewPatchServiceInternalServerError() *PatchServiceInternalServerError {

	return &PatchServiceInternalServerError{}
}

// NewPatchServiceInternalServerError creates PatchServiceInternalServerErrorRaw with default headers values
func NewPatchServiceInternalServerErrorRaw() *PatchServiceInternalServerErrorRaw {

	return &PatchServiceInternalServerErrorRaw{}
}

// WithPayload adds the payload to the patch service internal server error response
func (o *PatchServiceInternalServerError) WithPayload(payload *models2.Error) *PatchServiceInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service internal server error response
func (o *PatchServiceInternalServerErrorRaw) WithPayload(payload interface{}) *PatchServiceInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service internal server error response
func (o *PatchServiceInternalServerError) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
