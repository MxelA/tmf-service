// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	models2 "github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/models"
	"net/http"

	"github.com/go-openapi/runtime"
)

// Alex Server response
// RetrieveServiceOKCode is the HTTP code returned for type RetrieveServiceOK
const RetrieveServiceOKCode int = 200

/*
RetrieveServiceOK Success

swagger:response retrieveServiceOK
*/
type RetrieveServiceOK struct {

	/*
	  In: Body
	*/
	Payload *models2.Service `json:"body,omitempty"`
}

type RetrieveServiceOKRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRetrieveServiceOK creates RetrieveServiceOK with default headers values
func NewRetrieveServiceOK() *RetrieveServiceOK {

	return &RetrieveServiceOK{}
}

// NewRetrieveServiceOK creates RetrieveServiceOKRaw with default headers values
func NewRetrieveServiceOKRaw() *RetrieveServiceOKRaw {

	return &RetrieveServiceOKRaw{}
}

// WithPayload adds the payload to the retrieve service o k response
func (o *RetrieveServiceOK) WithPayload(payload *models2.Service) *RetrieveServiceOK {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the retrieve service o k response
func (o *RetrieveServiceOKRaw) WithPayload(payload interface{}) *RetrieveServiceOKRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve service o k response
func (o *RetrieveServiceOK) SetPayload(payload *models2.Service) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveServiceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RetrieveServiceOKRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RetrieveServiceBadRequestCode is the HTTP code returned for type RetrieveServiceBadRequest
const RetrieveServiceBadRequestCode int = 400

/*
RetrieveServiceBadRequest Bad Request

swagger:response retrieveServiceBadRequest
*/
type RetrieveServiceBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type RetrieveServiceBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRetrieveServiceBadRequest creates RetrieveServiceBadRequest with default headers values
func NewRetrieveServiceBadRequest() *RetrieveServiceBadRequest {

	return &RetrieveServiceBadRequest{}
}

// NewRetrieveServiceBadRequest creates RetrieveServiceBadRequestRaw with default headers values
func NewRetrieveServiceBadRequestRaw() *RetrieveServiceBadRequestRaw {

	return &RetrieveServiceBadRequestRaw{}
}

// WithPayload adds the payload to the retrieve service bad request response
func (o *RetrieveServiceBadRequest) WithPayload(payload *models2.Error) *RetrieveServiceBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the retrieve service bad request response
func (o *RetrieveServiceBadRequestRaw) WithPayload(payload interface{}) *RetrieveServiceBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve service bad request response
func (o *RetrieveServiceBadRequest) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveServiceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RetrieveServiceBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RetrieveServiceUnauthorizedCode is the HTTP code returned for type RetrieveServiceUnauthorized
const RetrieveServiceUnauthorizedCode int = 401

/*
RetrieveServiceUnauthorized Unauthorized

swagger:response retrieveServiceUnauthorized
*/
type RetrieveServiceUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type RetrieveServiceUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRetrieveServiceUnauthorized creates RetrieveServiceUnauthorized with default headers values
func NewRetrieveServiceUnauthorized() *RetrieveServiceUnauthorized {

	return &RetrieveServiceUnauthorized{}
}

// NewRetrieveServiceUnauthorized creates RetrieveServiceUnauthorizedRaw with default headers values
func NewRetrieveServiceUnauthorizedRaw() *RetrieveServiceUnauthorizedRaw {

	return &RetrieveServiceUnauthorizedRaw{}
}

// WithPayload adds the payload to the retrieve service unauthorized response
func (o *RetrieveServiceUnauthorized) WithPayload(payload *models2.Error) *RetrieveServiceUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the retrieve service unauthorized response
func (o *RetrieveServiceUnauthorizedRaw) WithPayload(payload interface{}) *RetrieveServiceUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve service unauthorized response
func (o *RetrieveServiceUnauthorized) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveServiceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RetrieveServiceUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RetrieveServiceForbiddenCode is the HTTP code returned for type RetrieveServiceForbidden
const RetrieveServiceForbiddenCode int = 403

/*
RetrieveServiceForbidden Forbidden

swagger:response retrieveServiceForbidden
*/
type RetrieveServiceForbidden struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type RetrieveServiceForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRetrieveServiceForbidden creates RetrieveServiceForbidden with default headers values
func NewRetrieveServiceForbidden() *RetrieveServiceForbidden {

	return &RetrieveServiceForbidden{}
}

// NewRetrieveServiceForbidden creates RetrieveServiceForbiddenRaw with default headers values
func NewRetrieveServiceForbiddenRaw() *RetrieveServiceForbiddenRaw {

	return &RetrieveServiceForbiddenRaw{}
}

// WithPayload adds the payload to the retrieve service forbidden response
func (o *RetrieveServiceForbidden) WithPayload(payload *models2.Error) *RetrieveServiceForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the retrieve service forbidden response
func (o *RetrieveServiceForbiddenRaw) WithPayload(payload interface{}) *RetrieveServiceForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve service forbidden response
func (o *RetrieveServiceForbidden) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveServiceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RetrieveServiceForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RetrieveServiceNotFoundCode is the HTTP code returned for type RetrieveServiceNotFound
const RetrieveServiceNotFoundCode int = 404

/*
RetrieveServiceNotFound Not Found

swagger:response retrieveServiceNotFound
*/
type RetrieveServiceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type RetrieveServiceNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRetrieveServiceNotFound creates RetrieveServiceNotFound with default headers values
func NewRetrieveServiceNotFound() *RetrieveServiceNotFound {

	return &RetrieveServiceNotFound{}
}

// NewRetrieveServiceNotFound creates RetrieveServiceNotFoundRaw with default headers values
func NewRetrieveServiceNotFoundRaw() *RetrieveServiceNotFoundRaw {

	return &RetrieveServiceNotFoundRaw{}
}

// WithPayload adds the payload to the retrieve service not found response
func (o *RetrieveServiceNotFound) WithPayload(payload *models2.Error) *RetrieveServiceNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the retrieve service not found response
func (o *RetrieveServiceNotFoundRaw) WithPayload(payload interface{}) *RetrieveServiceNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve service not found response
func (o *RetrieveServiceNotFound) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveServiceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RetrieveServiceNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RetrieveServiceMethodNotAllowedCode is the HTTP code returned for type RetrieveServiceMethodNotAllowed
const RetrieveServiceMethodNotAllowedCode int = 405

/*
RetrieveServiceMethodNotAllowed Method Not allowed

swagger:response retrieveServiceMethodNotAllowed
*/
type RetrieveServiceMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type RetrieveServiceMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRetrieveServiceMethodNotAllowed creates RetrieveServiceMethodNotAllowed with default headers values
func NewRetrieveServiceMethodNotAllowed() *RetrieveServiceMethodNotAllowed {

	return &RetrieveServiceMethodNotAllowed{}
}

// NewRetrieveServiceMethodNotAllowed creates RetrieveServiceMethodNotAllowedRaw with default headers values
func NewRetrieveServiceMethodNotAllowedRaw() *RetrieveServiceMethodNotAllowedRaw {

	return &RetrieveServiceMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the retrieve service method not allowed response
func (o *RetrieveServiceMethodNotAllowed) WithPayload(payload *models2.Error) *RetrieveServiceMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the retrieve service method not allowed response
func (o *RetrieveServiceMethodNotAllowedRaw) WithPayload(payload interface{}) *RetrieveServiceMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve service method not allowed response
func (o *RetrieveServiceMethodNotAllowed) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveServiceMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RetrieveServiceMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RetrieveServiceConflictCode is the HTTP code returned for type RetrieveServiceConflict
const RetrieveServiceConflictCode int = 409

/*
RetrieveServiceConflict Conflict

swagger:response retrieveServiceConflict
*/
type RetrieveServiceConflict struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type RetrieveServiceConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRetrieveServiceConflict creates RetrieveServiceConflict with default headers values
func NewRetrieveServiceConflict() *RetrieveServiceConflict {

	return &RetrieveServiceConflict{}
}

// NewRetrieveServiceConflict creates RetrieveServiceConflictRaw with default headers values
func NewRetrieveServiceConflictRaw() *RetrieveServiceConflictRaw {

	return &RetrieveServiceConflictRaw{}
}

// WithPayload adds the payload to the retrieve service conflict response
func (o *RetrieveServiceConflict) WithPayload(payload *models2.Error) *RetrieveServiceConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the retrieve service conflict response
func (o *RetrieveServiceConflictRaw) WithPayload(payload interface{}) *RetrieveServiceConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve service conflict response
func (o *RetrieveServiceConflict) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveServiceConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RetrieveServiceConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RetrieveServiceInternalServerErrorCode is the HTTP code returned for type RetrieveServiceInternalServerError
const RetrieveServiceInternalServerErrorCode int = 500

/*
RetrieveServiceInternalServerError Internal Server Error

swagger:response retrieveServiceInternalServerError
*/
type RetrieveServiceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models2.Error `json:"body,omitempty"`
}

type RetrieveServiceInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRetrieveServiceInternalServerError creates RetrieveServiceInternalServerError with default headers values
func NewRetrieveServiceInternalServerError() *RetrieveServiceInternalServerError {

	return &RetrieveServiceInternalServerError{}
}

// NewRetrieveServiceInternalServerError creates RetrieveServiceInternalServerErrorRaw with default headers values
func NewRetrieveServiceInternalServerErrorRaw() *RetrieveServiceInternalServerErrorRaw {

	return &RetrieveServiceInternalServerErrorRaw{}
}

// WithPayload adds the payload to the retrieve service internal server error response
func (o *RetrieveServiceInternalServerError) WithPayload(payload *models2.Error) *RetrieveServiceInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the retrieve service internal server error response
func (o *RetrieveServiceInternalServerErrorRaw) WithPayload(payload interface{}) *RetrieveServiceInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the retrieve service internal server error response
func (o *RetrieveServiceInternalServerError) SetPayload(payload *models2.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RetrieveServiceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RetrieveServiceInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
