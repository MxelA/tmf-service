// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/restapi/operations/events_subscription"
	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/restapi/operations/notification_listeners_client_side"
	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-inventory/swagger/tmf638v4_2/server/restapi/operations/service"
)

// NewTmfServiceInventoryV42API creates a new TmfServiceInventoryV42 instance
func NewTmfServiceInventoryV42API(spec *loads.Document) *TmfServiceInventoryV42API {
	return &TmfServiceInventoryV42API{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		ServiceCreateServiceHandler: service.CreateServiceHandlerFunc(func(params service.CreateServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation service.CreateService has not yet been implemented")
		}),
		ServiceDeleteServiceHandler: service.DeleteServiceHandlerFunc(func(params service.DeleteServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation service.DeleteService has not yet been implemented")
		}),
		ServiceListServiceHandler: service.ListServiceHandlerFunc(func(params service.ListServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation service.ListService has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceAttributeValueChangeEventHandler: notification_listeners_client_side.ListenToServiceAttributeValueChangeEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceAttributeValueChangeEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceAttributeValueChangeEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceCreateEventHandler: notification_listeners_client_side.ListenToServiceCreateEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceCreateEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceCreateEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceDeleteEventHandler: notification_listeners_client_side.ListenToServiceDeleteEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceDeleteEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceDeleteEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceOperatingStatusChangeEventHandler: notification_listeners_client_side.ListenToServiceOperatingStatusChangeEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceOperatingStatusChangeEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceOperatingStatusChangeEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceStateChangeEventHandler: notification_listeners_client_side.ListenToServiceStateChangeEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceStateChangeEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceStateChangeEvent has not yet been implemented")
		}),
		ServicePatchServiceHandler: service.PatchServiceHandlerFunc(func(params service.PatchServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation service.PatchService has not yet been implemented")
		}),
		EventsSubscriptionRegisterListenerHandler: events_subscription.RegisterListenerHandlerFunc(func(params events_subscription.RegisterListenerParams) middleware.Responder {
			return middleware.NotImplemented("operation events_subscription.RegisterListener has not yet been implemented")
		}),
		ServiceRetrieveServiceHandler: service.RetrieveServiceHandlerFunc(func(params service.RetrieveServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation service.RetrieveService has not yet been implemented")
		}),
		EventsSubscriptionUnregisterListenerHandler: events_subscription.UnregisterListenerHandlerFunc(func(params events_subscription.UnregisterListenerParams) middleware.Responder {
			return middleware.NotImplemented("operation events_subscription.UnregisterListener has not yet been implemented")
		}),
	}
}

/*
TmfServiceInventoryV42API ## TMF API Reference : TMF 638 - Service Inventory Management

	Version 4.2

The intent of this API is to provide a consistent/standardized mechanism to query and manipulate the Service inventory.

The Service Inventory API can be used to query the service instances for a customer via Self Service Portal or the Call Centre operator can query the service instances on behalf of the customer while a customer may have a complaint or a query.
Note: Only the CustomerFacingServices instances will be presented to the customer.

The Service Inventory API can be called by the Service Order Management to create a new service instance/ update an existing service instance in the Service Inventory.

### Service resource
Service is an abstract base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of  Service: CustomerFacingService and ResourceFacingService.

### Service Inventory API performs the following operations on service  :
- Retrieve  a service or a collection of services depending on filter criteria
- Partial update of a service (including updating rules)
- Create a service (including default values and creation rules and for administration users only)
- Delete a service (for administration users only)
- Notification of events on service

Copyright (c)TM Forum 2019. All Rights Reserved.
*/
type TmfServiceInventoryV42API struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	//   - application/json-patch+json
	//   - application/merge-patch+json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// ServiceCreateServiceHandler sets the operation handler for the create service operation
	ServiceCreateServiceHandler service.CreateServiceHandler
	// ServiceDeleteServiceHandler sets the operation handler for the delete service operation
	ServiceDeleteServiceHandler service.DeleteServiceHandler
	// ServiceListServiceHandler sets the operation handler for the list service operation
	ServiceListServiceHandler service.ListServiceHandler
	// NotificationListenersClientSideListenToServiceAttributeValueChangeEventHandler sets the operation handler for the listen to service attribute value change event operation
	NotificationListenersClientSideListenToServiceAttributeValueChangeEventHandler notification_listeners_client_side.ListenToServiceAttributeValueChangeEventHandler
	// NotificationListenersClientSideListenToServiceCreateEventHandler sets the operation handler for the listen to service create event operation
	NotificationListenersClientSideListenToServiceCreateEventHandler notification_listeners_client_side.ListenToServiceCreateEventHandler
	// NotificationListenersClientSideListenToServiceDeleteEventHandler sets the operation handler for the listen to service delete event operation
	NotificationListenersClientSideListenToServiceDeleteEventHandler notification_listeners_client_side.ListenToServiceDeleteEventHandler
	// NotificationListenersClientSideListenToServiceOperatingStatusChangeEventHandler sets the operation handler for the listen to service operating status change event operation
	NotificationListenersClientSideListenToServiceOperatingStatusChangeEventHandler notification_listeners_client_side.ListenToServiceOperatingStatusChangeEventHandler
	// NotificationListenersClientSideListenToServiceStateChangeEventHandler sets the operation handler for the listen to service state change event operation
	NotificationListenersClientSideListenToServiceStateChangeEventHandler notification_listeners_client_side.ListenToServiceStateChangeEventHandler
	// ServicePatchServiceHandler sets the operation handler for the patch service operation
	ServicePatchServiceHandler service.PatchServiceHandler
	// EventsSubscriptionRegisterListenerHandler sets the operation handler for the register listener operation
	EventsSubscriptionRegisterListenerHandler events_subscription.RegisterListenerHandler
	// ServiceRetrieveServiceHandler sets the operation handler for the retrieve service operation
	ServiceRetrieveServiceHandler service.RetrieveServiceHandler
	// EventsSubscriptionUnregisterListenerHandler sets the operation handler for the unregister listener operation
	EventsSubscriptionUnregisterListenerHandler events_subscription.UnregisterListenerHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *TmfServiceInventoryV42API) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *TmfServiceInventoryV42API) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *TmfServiceInventoryV42API) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TmfServiceInventoryV42API) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TmfServiceInventoryV42API) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TmfServiceInventoryV42API) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TmfServiceInventoryV42API) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TmfServiceInventoryV42API) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TmfServiceInventoryV42API) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TmfServiceInventoryV42API
func (o *TmfServiceInventoryV42API) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ServiceCreateServiceHandler == nil {
		unregistered = append(unregistered, "service.CreateServiceHandler")
	}
	if o.ServiceDeleteServiceHandler == nil {
		unregistered = append(unregistered, "service.DeleteServiceHandler")
	}
	if o.ServiceListServiceHandler == nil {
		unregistered = append(unregistered, "service.ListServiceHandler")
	}
	if o.NotificationListenersClientSideListenToServiceAttributeValueChangeEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceAttributeValueChangeEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceCreateEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceCreateEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceDeleteEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceDeleteEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceOperatingStatusChangeEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceOperatingStatusChangeEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceStateChangeEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceStateChangeEventHandler")
	}
	if o.ServicePatchServiceHandler == nil {
		unregistered = append(unregistered, "service.PatchServiceHandler")
	}
	if o.EventsSubscriptionRegisterListenerHandler == nil {
		unregistered = append(unregistered, "events_subscription.RegisterListenerHandler")
	}
	if o.ServiceRetrieveServiceHandler == nil {
		unregistered = append(unregistered, "service.RetrieveServiceHandler")
	}
	if o.EventsSubscriptionUnregisterListenerHandler == nil {
		unregistered = append(unregistered, "events_subscription.UnregisterListenerHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TmfServiceInventoryV42API) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TmfServiceInventoryV42API) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *TmfServiceInventoryV42API) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *TmfServiceInventoryV42API) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/json-patch+json":
			result["application/json-patch+json"] = o.JSONConsumer
		case "application/merge-patch+json":
			result["application/merge-patch+json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *TmfServiceInventoryV42API) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TmfServiceInventoryV42API) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the tmf service inventory v42 API
func (o *TmfServiceInventoryV42API) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TmfServiceInventoryV42API) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service"] = service.NewCreateService(o.context, o.ServiceCreateServiceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service/{id}"] = service.NewDeleteService(o.context, o.ServiceDeleteServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service"] = service.NewListService(o.context, o.ServiceListServiceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceAttributeValueChangeEvent"] = notification_listeners_client_side.NewListenToServiceAttributeValueChangeEvent(o.context, o.NotificationListenersClientSideListenToServiceAttributeValueChangeEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceCreateEvent"] = notification_listeners_client_side.NewListenToServiceCreateEvent(o.context, o.NotificationListenersClientSideListenToServiceCreateEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceDeleteEvent"] = notification_listeners_client_side.NewListenToServiceDeleteEvent(o.context, o.NotificationListenersClientSideListenToServiceDeleteEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceOperatingStatusChangeEvent"] = notification_listeners_client_side.NewListenToServiceOperatingStatusChangeEvent(o.context, o.NotificationListenersClientSideListenToServiceOperatingStatusChangeEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceStateChangeEvent"] = notification_listeners_client_side.NewListenToServiceStateChangeEvent(o.context, o.NotificationListenersClientSideListenToServiceStateChangeEventHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/service/{id}"] = service.NewPatchService(o.context, o.ServicePatchServiceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/hub"] = events_subscription.NewRegisterListener(o.context, o.EventsSubscriptionRegisterListenerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service/{id}"] = service.NewRetrieveService(o.context, o.ServiceRetrieveServiceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/hub/{id}"] = events_subscription.NewUnregisterListener(o.context, o.EventsSubscriptionUnregisterListenerHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TmfServiceInventoryV42API) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *TmfServiceInventoryV42API) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *TmfServiceInventoryV42API) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *TmfServiceInventoryV42API) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *TmfServiceInventoryV42API) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
