// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServiceStateType Valid values for the lifecycle state of the service
//
// swagger:model ServiceStateType
type ServiceStateType string

func NewServiceStateType(value ServiceStateType) *ServiceStateType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ServiceStateType.
func (m ServiceStateType) Pointer() *ServiceStateType {
	return &m
}

const (

	// ServiceStateTypeFeasibilityChecked captures enum value "feasibilityChecked"
	ServiceStateTypeFeasibilityChecked ServiceStateType = "feasibilityChecked"

	// ServiceStateTypeDesigned captures enum value "designed"
	ServiceStateTypeDesigned ServiceStateType = "designed"

	// ServiceStateTypeReserved captures enum value "reserved"
	ServiceStateTypeReserved ServiceStateType = "reserved"

	// ServiceStateTypeInactive captures enum value "inactive"
	ServiceStateTypeInactive ServiceStateType = "inactive"

	// ServiceStateTypeActive captures enum value "active"
	ServiceStateTypeActive ServiceStateType = "active"

	// ServiceStateTypeSuspended captures enum value "suspended"
	ServiceStateTypeSuspended ServiceStateType = "suspended"

	// ServiceStateTypeTerminated captures enum value "terminated"
	ServiceStateTypeTerminated ServiceStateType = "terminated"
)

// for schema
var serviceStateTypeEnum []interface{}

func init() {
	var res []ServiceStateType
	if err := json.Unmarshal([]byte(`["feasibilityChecked","designed","reserved","inactive","active","suspended","terminated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceStateTypeEnum = append(serviceStateTypeEnum, v)
	}
}

func (m ServiceStateType) validateServiceStateTypeEnum(path, location string, value ServiceStateType) error {
	if err := validate.EnumCase(path, location, value, serviceStateTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this service state type
func (m ServiceStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this service state type based on context it is used
func (m ServiceStateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
