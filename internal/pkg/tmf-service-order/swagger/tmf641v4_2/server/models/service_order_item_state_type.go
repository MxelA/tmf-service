// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServiceOrderItemStateType Possible values for the state of the order item
//
// swagger:model ServiceOrderItemStateType
type ServiceOrderItemStateType string

func NewServiceOrderItemStateType(value ServiceOrderItemStateType) *ServiceOrderItemStateType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ServiceOrderItemStateType.
func (m ServiceOrderItemStateType) Pointer() *ServiceOrderItemStateType {
	return &m
}

const (

	// ServiceOrderItemStateTypeAcknowledged captures enum value "acknowledged"
	ServiceOrderItemStateTypeAcknowledged ServiceOrderItemStateType = "acknowledged"

	// ServiceOrderItemStateTypeRejected captures enum value "rejected"
	ServiceOrderItemStateTypeRejected ServiceOrderItemStateType = "rejected"

	// ServiceOrderItemStateTypePending captures enum value "pending"
	ServiceOrderItemStateTypePending ServiceOrderItemStateType = "pending"

	// ServiceOrderItemStateTypeHeld captures enum value "held"
	ServiceOrderItemStateTypeHeld ServiceOrderItemStateType = "held"

	// ServiceOrderItemStateTypeInProgress captures enum value "inProgress"
	ServiceOrderItemStateTypeInProgress ServiceOrderItemStateType = "inProgress"

	// ServiceOrderItemStateTypeCancelled captures enum value "cancelled"
	ServiceOrderItemStateTypeCancelled ServiceOrderItemStateType = "cancelled"

	// ServiceOrderItemStateTypeCompleted captures enum value "completed"
	ServiceOrderItemStateTypeCompleted ServiceOrderItemStateType = "completed"

	// ServiceOrderItemStateTypeFailed captures enum value "failed"
	ServiceOrderItemStateTypeFailed ServiceOrderItemStateType = "failed"

	// ServiceOrderItemStateTypeAssessingCancellation captures enum value "assessingCancellation"
	ServiceOrderItemStateTypeAssessingCancellation ServiceOrderItemStateType = "assessingCancellation"

	// ServiceOrderItemStateTypePendingCancellation captures enum value "pendingCancellation"
	ServiceOrderItemStateTypePendingCancellation ServiceOrderItemStateType = "pendingCancellation"

	// ServiceOrderItemStateTypePartial captures enum value "partial"
	ServiceOrderItemStateTypePartial ServiceOrderItemStateType = "partial"
)

// for schema
var serviceOrderItemStateTypeEnum []interface{}

func init() {
	var res []ServiceOrderItemStateType
	if err := json.Unmarshal([]byte(`["acknowledged","rejected","pending","held","inProgress","cancelled","completed","failed","assessingCancellation","pendingCancellation","partial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceOrderItemStateTypeEnum = append(serviceOrderItemStateTypeEnum, v)
	}
}

func (m ServiceOrderItemStateType) validateServiceOrderItemStateTypeEnum(path, location string, value ServiceOrderItemStateType) error {
	if err := validate.EnumCase(path, location, value, serviceOrderItemStateTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this service order item state type
func (m ServiceOrderItemStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceOrderItemStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this service order item state type based on context it is used
func (m ServiceOrderItemStateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
