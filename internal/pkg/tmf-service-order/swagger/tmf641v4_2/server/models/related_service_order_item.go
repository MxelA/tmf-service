// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RelatedServiceOrderItem RelatedServiceOrderItem (a ServiceOrder item) .The service order item which triggered service creation/change/termination.
//
// swagger:model RelatedServiceOrderItem
type RelatedServiceOrderItem struct {

	// When sub-classing, this defines the super-class
	AtBaseType *string `json:"@baseType,omitempty" bson:"@baseType,omitempty"`

	// The actual type of the target instance when needed for disambiguation.
	AtReferredType *string `json:"@referredType,omitempty" bson:"@referredType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation *strfmt.URI `json:"@schemaLocation,omitempty" bson:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType *string `json:"@type,omitempty" bson:"@type,omitempty"`

	// Action of the order item for this service
	// Enum: ["add","modify","delete","noChange"]
	ItemAction *string `json:"itemAction,omitempty" bson:"itemAction"`

	// Identifier of the order item where the service was managed
	// Required: true
	ItemID *string `json:"itemId" bson:"itemId"`

	// role of the service order item for this service
	Role *string `json:"role,omitempty" bson:"role,omitempty"`

	// Reference of the related entity.
	ServiceOrderHref *string `json:"serviceOrderHref,omitempty" bson:"serviceOrderHref,omitempty"`

	// Unique identifier of a related entity.
	ServiceOrderID *string `json:"serviceOrderId,omitempty" bson:"serviceOrderId,omitempty"`
}

// Validate validates this related service order item
func (m *RelatedServiceOrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelatedServiceOrderItem) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

var relatedServiceOrderItemTypeItemActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["add","modify","delete","noChange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		relatedServiceOrderItemTypeItemActionPropEnum = append(relatedServiceOrderItemTypeItemActionPropEnum, v)
	}
}

const (

	// RelatedServiceOrderItemItemActionAdd captures enum value "add"
	RelatedServiceOrderItemItemActionAdd string = "add"

	// RelatedServiceOrderItemItemActionModify captures enum value "modify"
	RelatedServiceOrderItemItemActionModify string = "modify"

	// RelatedServiceOrderItemItemActionDelete captures enum value "delete"
	RelatedServiceOrderItemItemActionDelete string = "delete"

	// RelatedServiceOrderItemItemActionNoChange captures enum value "noChange"
	RelatedServiceOrderItemItemActionNoChange string = "noChange"
)

// prop value enum
func (m *RelatedServiceOrderItem) validateItemActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, relatedServiceOrderItemTypeItemActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RelatedServiceOrderItem) validateItemAction(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateItemActionEnum("itemAction", "body", *m.ItemAction); err != nil {
		return err
	}

	return nil
}

func (m *RelatedServiceOrderItem) validateItemID(formats strfmt.Registry) error {

	if err := validate.Required("itemId", "body", m.ItemID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this related service order item based on context it is used
func (m *RelatedServiceOrderItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RelatedServiceOrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelatedServiceOrderItem) UnmarshalBinary(b []byte) error {
	var res RelatedServiceOrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
