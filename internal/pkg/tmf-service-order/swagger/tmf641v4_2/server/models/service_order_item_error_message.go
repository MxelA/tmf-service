// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceOrderItemErrorMessage AServiceOrderItemErrorMessage represents an error that causes a status change in a service order item.
//
// swagger:model ServiceOrderItemErrorMessage
type ServiceOrderItemErrorMessage struct {

	// When sub-classing, this defines the super-class
	AtBaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation strfmt.URI `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType string `json:"@type,omitempty"`

	// error code
	Code int64 `json:"code,omitempty"`

	// More details and corrective actions related to the error
	Message string `json:"message,omitempty"`

	// Explanation of the reason for the error
	Reason string `json:"reason,omitempty"`

	// URI of documentation describing the error
	// Format: uri
	ReferenceError strfmt.URI `json:"referenceError,omitempty"`

	// error code extension like sys-ABC-2001
	Status string `json:"status,omitempty"`

	// Date when the error happened
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this service order item error message
func (m *ServiceOrderItemErrorMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceOrderItemErrorMessage) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrderItemErrorMessage) validateReferenceError(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferenceError) { // not required
		return nil
	}

	if err := validate.FormatOf("referenceError", "body", "uri", m.ReferenceError.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrderItemErrorMessage) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service order item error message based on context it is used
func (m *ServiceOrderItemErrorMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceOrderItemErrorMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceOrderItemErrorMessage) UnmarshalBinary(b []byte) error {
	var res ServiceOrderItemErrorMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
