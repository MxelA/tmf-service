// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceOrder service order
//
// swagger:model ServiceOrder
type ServiceOrder struct {

	// When sub-classing, this defines the super-class
	AtBaseType *string `json:"@baseType,omitempty" bson:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation *strfmt.URI `json:"@schemaLocation,omitempty" bson:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType *string `json:"@type,omitempty" bson:"@type,omitempty"`

	// Date when the order is cancelled. This is used when order is cancelled.
	// Format: date-time
	CancellationDate *strfmt.DateTime `json:"cancellationDate,omitempty" bson:"cancellationDate,omitempty"`

	// Reason why the order is cancelled. This is used when order is cancelled.
	CancellationReason *string `json:"cancellationReason,omitempty" bson:"cancellationReason,omitempty"`

	// Used to categorize the order, useful for the OM system, such as: Broadband, TVOption
	Category *string `json:"category,omitempty" bson:"category,omitempty"`

	// Effective delivery date amended by the provider
	// Format: date-time
	CompletionDate *strfmt.DateTime `json:"completionDate,omitempty" bson:"completionDate,omitempty"`

	// A free-text description of the service order
	Description *string `json:"description,omitempty" bson:"description,omitempty"`

	// the error message if the order closed by an error
	ErrorMessage *ServiceOrderErrorMessage `json:"errorMessage,omitempty"`

	// Expected delivery date amended by the provider
	// Format: date-time
	ExpectedCompletionDate *strfmt.DateTime `json:"expectedCompletionDate,omitempty" bson:"expectedCompletionDate,omitempty"`

	// ID given by the consumer to facilitate searches
	ExternalID *string `json:"externalId,omitempty" bson:"externalId,omitempty"`

	// external reference
	ExternalReference []*ExternalReference `json:"externalReference,omitempty" bson:"externalReference,omitempty"`

	// Hyperlink to access the order
	Href *string `json:"href,omitempty" bson:"href,omitempty"`

	// ID created on repository side
	ID string `json:"id,omitempty" bson:"_id,omitempty"`

	// A list of jeopardy alerts related to this order
	JeopardyAlert []*ServiceOrderJeopardyAlert `json:"jeopardyAlert,omitempty" bson:"jeopardyAlert,omitempty"`

	// A list of milestones related to this order
	Milestone []*ServiceOrderMilestone `json:"milestone,omitempty" bson:"milestone,omitempty"`

	// Extra-information about the order; e.g. useful to add extra delivery information that could be useful for a human process
	Note []*Note `json:"note,omitempty" bson:"note,omitempty"`

	// Contact attached to the order to send back information regarding this order
	NotificationContact *string `json:"notificationContact,omitempty" bson:"notificationContact,omitempty"`

	// order date
	// Format: date-time
	OrderDate *strfmt.DateTime `json:"orderDate,omitempty" bson:"orderDate,omitempty"`

	// A list of service orders related to this order (e.g. prerequisite, dependent on)
	OrderRelationship []*ServiceOrderRelationship `json:"orderRelationship,omitempty" bson:"orderRelationship,omitempty"`

	// Can be used by consumers to prioritize orders in a Service Order Management system
	Priority *string `json:"priority,omitempty" bson:"priority,omitempty"`

	// A list of parties which are involved in this order and the role they are playing
	RelatedParty []*RelatedParty `json:"relatedParty,omitempty" bson:"relatedParty,omitempty"`

	// Requested delivery date from the requestors perspective
	// Format: date-time
	RequestedCompletionDate *strfmt.DateTime `json:"requestedCompletionDate,omitempty" bson:"requestedCompletionDate,omitempty"`

	// Order start date wished by the requestor
	// Format: date-time
	RequestedStartDate *strfmt.DateTime `json:"requestedStartDate,omitempty" bson:"requestedStartDate,omitempty"`

	// A list of service order items to be processed by this order
	ServiceOrderItem []*ServiceOrderItem `json:"serviceOrderItem" bson:"serviceOrderItem"`

	// Date when the order was started for processing
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate,omitempty" bson:"startDate,omitempty"`

	// State of the order: described in the state-machine diagram
	// Enum: ["acknowledged","rejected","pending","held","inProgress","cancelled","completed","failed","partial","assessingCancellation","pendingCancellation"]
	State *string `json:"state,omitempty" bson:"state,omitempty"`
}

// Validate validates this service order
func (m *ServiceOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCancellationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJeopardyAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMilestone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderRelationship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceOrderItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceOrder) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrder) validateCancellationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CancellationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("cancellationDate", "body", "date-time", m.CancellationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrder) validateCompletionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("completionDate", "body", "date-time", m.CompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrder) validateErrorMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorMessage) { // not required
		return nil
	}

	if m.ErrorMessage != nil {
		if err := m.ErrorMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorMessage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorMessage")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceOrder) validateExpectedCompletionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpectedCompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedCompletionDate", "body", "date-time", m.ExpectedCompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrder) validateExternalReference(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalReference) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalReference); i++ {
		if swag.IsZero(m.ExternalReference[i]) { // not required
			continue
		}

		if m.ExternalReference[i] != nil {
			if err := m.ExternalReference[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) validateJeopardyAlert(formats strfmt.Registry) error {
	if swag.IsZero(m.JeopardyAlert) { // not required
		return nil
	}

	for i := 0; i < len(m.JeopardyAlert); i++ {
		if swag.IsZero(m.JeopardyAlert[i]) { // not required
			continue
		}

		if m.JeopardyAlert[i] != nil {
			if err := m.JeopardyAlert[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jeopardyAlert" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("jeopardyAlert" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) validateMilestone(formats strfmt.Registry) error {
	if swag.IsZero(m.Milestone) { // not required
		return nil
	}

	for i := 0; i < len(m.Milestone); i++ {
		if swag.IsZero(m.Milestone[i]) { // not required
			continue
		}

		if m.Milestone[i] != nil {
			if err := m.Milestone[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestone" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestone" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) validateNote(formats strfmt.Registry) error {
	if swag.IsZero(m.Note) { // not required
		return nil
	}

	for i := 0; i < len(m.Note); i++ {
		if swag.IsZero(m.Note[i]) { // not required
			continue
		}

		if m.Note[i] != nil {
			if err := m.Note[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("note" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("note" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) validateOrderDate(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderDate) { // not required
		return nil
	}

	if err := validate.FormatOf("orderDate", "body", "date-time", m.OrderDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrder) validateOrderRelationship(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderRelationship) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderRelationship); i++ {
		if swag.IsZero(m.OrderRelationship[i]) { // not required
			continue
		}

		if m.OrderRelationship[i] != nil {
			if err := m.OrderRelationship[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderRelationship" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) validateRelatedParty(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedParty) { // not required
		return nil
	}

	for i := 0; i < len(m.RelatedParty); i++ {
		if swag.IsZero(m.RelatedParty[i]) { // not required
			continue
		}

		if m.RelatedParty[i] != nil {
			if err := m.RelatedParty[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) validateRequestedCompletionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedCompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedCompletionDate", "body", "date-time", m.RequestedCompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrder) validateRequestedStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedStartDate", "body", "date-time", m.RequestedStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrder) validateServiceOrderItem(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceOrderItem) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceOrderItem); i++ {
		if swag.IsZero(m.ServiceOrderItem[i]) { // not required
			continue
		}

		if m.ServiceOrderItem[i] != nil {
			if err := m.ServiceOrderItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceOrderItem" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceOrderItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var serviceOrderTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["acknowledged","rejected","pending","held","inProgress","cancelled","completed","failed","partial","assessingCancellation","pendingCancellation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceOrderTypeStatePropEnum = append(serviceOrderTypeStatePropEnum, v)
	}
}

const (

	// ServiceOrderStateAcknowledged captures enum value "acknowledged"
	ServiceOrderStateAcknowledged string = "acknowledged"

	// ServiceOrderStateRejected captures enum value "rejected"
	ServiceOrderStateRejected string = "rejected"

	// ServiceOrderStatePending captures enum value "pending"
	ServiceOrderStatePending string = "pending"

	// ServiceOrderStateHeld captures enum value "held"
	ServiceOrderStateHeld string = "held"

	// ServiceOrderStateInProgress captures enum value "inProgress"
	ServiceOrderStateInProgress string = "inProgress"

	// ServiceOrderStateCancelled captures enum value "cancelled"
	ServiceOrderStateCancelled string = "cancelled"

	// ServiceOrderStateCompleted captures enum value "completed"
	ServiceOrderStateCompleted string = "completed"

	// ServiceOrderStateFailed captures enum value "failed"
	ServiceOrderStateFailed string = "failed"

	// ServiceOrderStatePartial captures enum value "partial"
	ServiceOrderStatePartial string = "partial"

	// ServiceOrderStateAssessingCancellation captures enum value "assessingCancellation"
	ServiceOrderStateAssessingCancellation string = "assessingCancellation"

	// ServiceOrderStatePendingCancellation captures enum value "pendingCancellation"
	ServiceOrderStatePendingCancellation string = "pendingCancellation"
)

// prop value enum
func (m *ServiceOrder) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceOrderTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceOrder) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service order based on the context it is used
func (m *ServiceOrder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExternalReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJeopardyAlert(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMilestone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderRelationship(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceOrderItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceOrder) contextValidateErrorMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorMessage != nil {

		if swag.IsZero(m.ErrorMessage) { // not required
			return nil
		}

		if err := m.ErrorMessage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorMessage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorMessage")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceOrder) contextValidateExternalReference(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalReference); i++ {

		if m.ExternalReference[i] != nil {

			if swag.IsZero(m.ExternalReference[i]) { // not required
				return nil
			}

			if err := m.ExternalReference[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) contextValidateJeopardyAlert(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JeopardyAlert); i++ {

		if m.JeopardyAlert[i] != nil {

			if swag.IsZero(m.JeopardyAlert[i]) { // not required
				return nil
			}

			if err := m.JeopardyAlert[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jeopardyAlert" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("jeopardyAlert" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) contextValidateMilestone(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Milestone); i++ {

		if m.Milestone[i] != nil {

			if swag.IsZero(m.Milestone[i]) { // not required
				return nil
			}

			if err := m.Milestone[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("milestone" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("milestone" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) contextValidateNote(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Note); i++ {

		if m.Note[i] != nil {

			if swag.IsZero(m.Note[i]) { // not required
				return nil
			}

			if err := m.Note[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("note" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("note" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) contextValidateOrderRelationship(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrderRelationship); i++ {

		if m.OrderRelationship[i] != nil {

			if swag.IsZero(m.OrderRelationship[i]) { // not required
				return nil
			}

			if err := m.OrderRelationship[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderRelationship" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) contextValidateRelatedParty(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RelatedParty); i++ {

		if m.RelatedParty[i] != nil {

			if swag.IsZero(m.RelatedParty[i]) { // not required
				return nil
			}

			if err := m.RelatedParty[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrder) contextValidateServiceOrderItem(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServiceOrderItem); i++ {

		if m.ServiceOrderItem[i] != nil {

			if swag.IsZero(m.ServiceOrderItem[i]) { // not required
				return nil
			}

			if err := m.ServiceOrderItem[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceOrderItem" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceOrderItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceOrder) UnmarshalBinary(b []byte) error {
	var res ServiceOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
