// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CancelServiceOrderCreate Request for cancellation an existing Service order
// Skipped properties: id,href,state,effectiveCancellationDate
//
// swagger:model CancelServiceOrder_Create
type CancelServiceOrderCreate struct {

	// When sub-classing, this defines the super-class
	AtBaseType *string `json:"@baseType,omitempty" bson:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation *strfmt.URI `json:"@schemaLocation,omitempty" bson:"@atSchemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType *string `json:"@type,omitempty" bson:"@type,omitempty"`

	// Reason why the order is cancelled.
	CancellationReason *string `json:"cancellationReason,omitempty" bson:"cancellationReason,omitempty"`

	// an optional message describing the completion of the task if it is done as expected or it is denied for a reason (like order in an state of PoNR).
	CompletionMessage *string `json:"completionMessage,omitempty" bson:"completionMessage,omitempty"`

	// error message
	ErrorMessage *Error `json:"errorMessage,omitempty"`

	// Date when the submitter wants the order to be cancelled
	// Format: date-time
	RequestedCancellationDate *strfmt.DateTime `json:"requestedCancellationDate,omitempty" bson:"requestedCancellationDate,omitempty"`

	// service order
	// Required: true
	ServiceOrder *ServiceOrderRef `json:"serviceOrder"`
}

// Validate validates this cancel service order create
func (m *CancelServiceOrderCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedCancellationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelServiceOrderCreate) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CancelServiceOrderCreate) validateErrorMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorMessage) { // not required
		return nil
	}

	if m.ErrorMessage != nil {
		if err := m.ErrorMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorMessage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorMessage")
			}
			return err
		}
	}

	return nil
}

func (m *CancelServiceOrderCreate) validateRequestedCancellationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedCancellationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedCancellationDate", "body", "date-time", m.RequestedCancellationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CancelServiceOrderCreate) validateServiceOrder(formats strfmt.Registry) error {

	if err := validate.Required("serviceOrder", "body", m.ServiceOrder); err != nil {
		return err
	}

	if m.ServiceOrder != nil {
		if err := m.ServiceOrder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceOrder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceOrder")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cancel service order create based on the context it is used
func (m *CancelServiceOrderCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelServiceOrderCreate) contextValidateErrorMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorMessage != nil {

		if swag.IsZero(m.ErrorMessage) { // not required
			return nil
		}

		if err := m.ErrorMessage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorMessage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorMessage")
			}
			return err
		}
	}

	return nil
}

func (m *CancelServiceOrderCreate) contextValidateServiceOrder(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceOrder != nil {

		if err := m.ServiceOrder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceOrder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceOrder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CancelServiceOrderCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CancelServiceOrderCreate) UnmarshalBinary(b []byte) error {
	var res CancelServiceOrderCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
