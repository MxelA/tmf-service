// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderItemActionType action to be performed on the product
//
// swagger:model OrderItemActionType
type OrderItemActionType string

func NewOrderItemActionType(value OrderItemActionType) *OrderItemActionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrderItemActionType.
func (m OrderItemActionType) Pointer() *OrderItemActionType {
	return &m
}

const (

	// OrderItemActionTypeAdd captures enum value "add"
	OrderItemActionTypeAdd OrderItemActionType = "add"

	// OrderItemActionTypeModify captures enum value "modify"
	OrderItemActionTypeModify OrderItemActionType = "modify"

	// OrderItemActionTypeDelete captures enum value "delete"
	OrderItemActionTypeDelete OrderItemActionType = "delete"

	// OrderItemActionTypeNoChange captures enum value "noChange"
	OrderItemActionTypeNoChange OrderItemActionType = "noChange"
)

// for schema
var orderItemActionTypeEnum []interface{}

func init() {
	var res []OrderItemActionType
	if err := json.Unmarshal([]byte(`["add","modify","delete","noChange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderItemActionTypeEnum = append(orderItemActionTypeEnum, v)
	}
}

func (m OrderItemActionType) validateOrderItemActionTypeEnum(path, location string, value OrderItemActionType) error {
	if err := validate.EnumCase(path, location, value, orderItemActionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order item action type
func (m OrderItemActionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderItemActionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order item action type based on context it is used
func (m OrderItemActionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
