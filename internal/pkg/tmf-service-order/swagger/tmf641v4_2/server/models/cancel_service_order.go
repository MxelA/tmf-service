// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CancelServiceOrder Request for cancellation an existing Service order
//
// swagger:model CancelServiceOrder
type CancelServiceOrder struct {

	// When sub-classing, this defines the super-class
	AtBaseType *string `json:"@baseType,omitempty" bson:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation *strfmt.URI `json:"@schemaLocation,omitempty" bson:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType *string `json:"@type,omitempty" bson:"@type,omitempty"`

	// Reason why the order is cancelled.
	CancellationReason *string `json:"cancellationReason,omitempty" bson:"cancellationReason,omitempty"`

	// an optional message describing the completion of the task if it is done as expected or it is denied for a reason (like order in an state of PoNR).
	CompletionMessage *string `json:"completionMessage,omitempty" bson:"cancellationReason,omitempty"`

	// Date when the order is cancelled.
	// Format: date-time
	EffectiveCancellationDate *strfmt.DateTime `json:"effectiveCancellationDate,omitempty" bson:"effectiveCancellationDate,omitempty"`

	// error message
	ErrorMessage *Error `json:"errorMessage,omitempty"`

	// Hyperlink reference
	// Format: uri
	Href *strfmt.URI `json:"href,omitempty" bson:"href,omitempty"`

	// unique identifier
	ID *string `json:"id,omitempty" bson:"_id,omitempty"`

	// Date when the submitter wants the order to be cancelled
	// Format: date-time
	RequestedCancellationDate *strfmt.DateTime `json:"requestedCancellationDate,omitempty" bson:"requestedCancellationDate,omitempty"`

	// service order
	ServiceOrder *ServiceOrderRef `json:"serviceOrder,omitempty"`

	// Tracks the lifecycle status of the cancellation request, such as Acknowledged, Rejected, InProgress, Pending and so on.
	// Enum: ["accepted","terminatedWithError","inProgress","done"]
	State *string `json:"state,omitempty" bson:"state,omitempty"`
}

// Validate validates this cancel service order
func (m *CancelServiceOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveCancellationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedCancellationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelServiceOrder) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CancelServiceOrder) validateEffectiveCancellationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveCancellationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveCancellationDate", "body", "date-time", m.EffectiveCancellationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CancelServiceOrder) validateErrorMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorMessage) { // not required
		return nil
	}

	if m.ErrorMessage != nil {
		if err := m.ErrorMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorMessage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorMessage")
			}
			return err
		}
	}

	return nil
}

func (m *CancelServiceOrder) validateHref(formats strfmt.Registry) error {
	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.FormatOf("href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CancelServiceOrder) validateRequestedCancellationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedCancellationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedCancellationDate", "body", "date-time", m.RequestedCancellationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CancelServiceOrder) validateServiceOrder(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceOrder) { // not required
		return nil
	}

	if m.ServiceOrder != nil {
		if err := m.ServiceOrder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceOrder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceOrder")
			}
			return err
		}
	}

	return nil
}

var cancelServiceOrderTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["accepted","terminatedWithError","inProgress","done"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cancelServiceOrderTypeStatePropEnum = append(cancelServiceOrderTypeStatePropEnum, v)
	}
}

const (

	// CancelServiceOrderStateAccepted captures enum value "accepted"
	CancelServiceOrderStateAccepted string = "accepted"

	// CancelServiceOrderStateTerminatedWithError captures enum value "terminatedWithError"
	CancelServiceOrderStateTerminatedWithError string = "terminatedWithError"

	// CancelServiceOrderStateInProgress captures enum value "inProgress"
	CancelServiceOrderStateInProgress string = "inProgress"

	// CancelServiceOrderStateDone captures enum value "done"
	CancelServiceOrderStateDone string = "done"
)

// prop value enum
func (m *CancelServiceOrder) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cancelServiceOrderTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CancelServiceOrder) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cancel service order based on the context it is used
func (m *CancelServiceOrder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CancelServiceOrder) contextValidateErrorMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrorMessage != nil {

		if swag.IsZero(m.ErrorMessage) { // not required
			return nil
		}

		if err := m.ErrorMessage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errorMessage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errorMessage")
			}
			return err
		}
	}

	return nil
}

func (m *CancelServiceOrder) contextValidateServiceOrder(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceOrder != nil {

		if swag.IsZero(m.ServiceOrder) { // not required
			return nil
		}

		if err := m.ServiceOrder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceOrder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceOrder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CancelServiceOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CancelServiceOrder) UnmarshalBinary(b []byte) error {
	var res CancelServiceOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
