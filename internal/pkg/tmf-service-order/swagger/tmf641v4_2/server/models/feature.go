// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Feature Configuration feature.
//
// swagger:model Feature
type Feature struct {

	// When sub-classing, this defines the super-class
	AtBaseType *string `json:"@baseType,omitempty" bson:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation *strfmt.URI `json:"@schemaLocation,omitempty" bson:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType *string `json:"@type,omitempty" bson:"@type,omitempty"`

	// This is a list of feature constraints.
	Constraint []*ConstraintRef `json:"constraint" bson:"constraint,omitempty"`

	// This is a list of Characteristics for a particular feature.
	FeatureCharacteristic []*Characteristic `json:"featureCharacteristic" bson:"featureCharacteristic,omitempty"`

	// feature relationship
	FeatureRelationship []*FeatureRelationship `json:"featureRelationship" bson:"featureRelationship,omitempty"`

	// Unique identifier of the feature.
	ID *string `json:"id,omitempty" bson:"id,omitempty"`

	// True if this is a feature group. Default is false.
	IsBundle *bool `json:"isBundle,omitempty" bson:"isBundle,omitempty"`

	// True if this feature is enabled. Default is true.
	IsEnabled *bool `json:"isEnabled,omitempty" bson:"isEnabled,omitempty"`

	// This is the name for the feature.
	// Required: true
	Name *string `json:"name" bson:"name"`
}

// Validate validates this feature
func (m *Feature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstraint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureCharacteristic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureRelationship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feature) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Feature) validateConstraint(formats strfmt.Registry) error {
	if swag.IsZero(m.Constraint) { // not required
		return nil
	}

	for i := 0; i < len(m.Constraint); i++ {
		if swag.IsZero(m.Constraint[i]) { // not required
			continue
		}

		if m.Constraint[i] != nil {
			if err := m.Constraint[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("constraint" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("constraint" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Feature) validateFeatureCharacteristic(formats strfmt.Registry) error {
	if swag.IsZero(m.FeatureCharacteristic) { // not required
		return nil
	}

	for i := 0; i < len(m.FeatureCharacteristic); i++ {
		if swag.IsZero(m.FeatureCharacteristic[i]) { // not required
			continue
		}

		if m.FeatureCharacteristic[i] != nil {
			if err := m.FeatureCharacteristic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureCharacteristic" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureCharacteristic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Feature) validateFeatureRelationship(formats strfmt.Registry) error {
	if swag.IsZero(m.FeatureRelationship) { // not required
		return nil
	}

	for i := 0; i < len(m.FeatureRelationship); i++ {
		if swag.IsZero(m.FeatureRelationship[i]) { // not required
			continue
		}

		if m.FeatureRelationship[i] != nil {
			if err := m.FeatureRelationship[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureRelationship" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Feature) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this feature based on the context it is used
func (m *Feature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstraint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatureCharacteristic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatureRelationship(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feature) contextValidateConstraint(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Constraint); i++ {

		if m.Constraint[i] != nil {

			if swag.IsZero(m.Constraint[i]) { // not required
				return nil
			}

			if err := m.Constraint[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("constraint" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("constraint" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Feature) contextValidateFeatureCharacteristic(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeatureCharacteristic); i++ {

		if m.FeatureCharacteristic[i] != nil {

			if swag.IsZero(m.FeatureCharacteristic[i]) { // not required
				return nil
			}

			if err := m.FeatureCharacteristic[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureCharacteristic" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureCharacteristic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Feature) contextValidateFeatureRelationship(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeatureRelationship); i++ {

		if m.FeatureRelationship[i] != nil {

			if swag.IsZero(m.FeatureRelationship[i]) { // not required
				return nil
			}

			if err := m.FeatureRelationship[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureRelationship" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Feature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Feature) UnmarshalBinary(b []byte) error {
	var res Feature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
