// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeatureRelationship Configuration feature
//
// swagger:model FeatureRelationship
type FeatureRelationship struct {

	// When sub-classing, this defines the super-class
	AtBaseType *string `json:"@baseType,omitempty" bson:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation *strfmt.URI `json:"@schemaLocation,omitempty" bson:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType *string `json:"@type,omitempty" bson:"@type,omitempty"`

	// Unique identifier of the target feature.
	ID *string `json:"id,omitempty" bson:"id,omitempty"`

	// This is the name of the target feature.
	// Required: true
	Name *string `json:"name" bson:"name"`

	// This is the type of the feature relationship.
	// Required: true
	RelationshipType *string `json:"relationshipType" bson:"relationshipType"`

	// The period for which this feature relationship is valid.
	ValidFor *TimePeriod `json:"validFor,omitempty"`
}

// Validate validates this feature relationship
func (m *FeatureRelationship) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationshipType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureRelationship) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FeatureRelationship) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FeatureRelationship) validateRelationshipType(formats strfmt.Registry) error {

	if err := validate.Required("relationshipType", "body", m.RelationshipType); err != nil {
		return err
	}

	return nil
}

func (m *FeatureRelationship) validateValidFor(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidFor) { // not required
		return nil
	}

	if m.ValidFor != nil {
		if err := m.ValidFor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validFor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validFor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this feature relationship based on the context it is used
func (m *FeatureRelationship) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValidFor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureRelationship) contextValidateValidFor(ctx context.Context, formats strfmt.Registry) error {

	if m.ValidFor != nil {

		if swag.IsZero(m.ValidFor) { // not required
			return nil
		}

		if err := m.ValidFor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validFor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validFor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeatureRelationship) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeatureRelationship) UnmarshalBinary(b []byte) error {
	var res FeatureRelationship
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
