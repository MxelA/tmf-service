// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceOrderCreate
// Skipped properties: id,href,orderDate,completionDate,expectedCompletionDate,startDate,state,jeopardyAlert,errorMessage,milestone
//
// swagger:model ServiceOrder_Create
type ServiceOrderCreate struct {

	// When sub-classing, this defines the super-class
	AtBaseType *string `json:"@baseType,omitempty" bson:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	// Format: uri
	AtSchemaLocation *strfmt.URI `json:"@schemaLocation,omitempty" bson:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class Extensible name
	AtType *string `json:"@type,omitempty" bson:"@type,omitempty"`

	// Date when the order is cancelled. This is used when order is cancelled.
	// Format: date-time
	CancellationDate *strfmt.DateTime `json:"cancellationDate,omitempty" bson:"cancellationDate,omitempty"`

	// Reason why the order is cancelled. This is used when order is cancelled.
	CancellationReason *string `json:"cancellationReason,omitempty" bson:"cancellationReason,omitempty"`

	// Used to categorize the order, useful for the OM system, such as: Broadband, TVOption
	Category *string `json:"category,omitempty" bson:"category,omitempty"`

	// A free-text description of the service order
	Description *string `json:"description,omitempty" bson:"description,omitempty"`

	// ID given by the consumer to facilitate searches
	ExternalID *string `json:"externalId,omitempty" bson:"externalId,omitempty"`

	// external reference
	ExternalReference []*ExternalReference `json:"externalReference" bson:"externalReference,omitempty"`

	// Extra-information about the order; e.g. useful to add extra delivery information that could be useful for a human process
	Note []*Note `json:"note" bson:"note,omitempty"`

	// Contact attached to the order to send back information regarding this order
	NotificationContact *string `json:"notificationContact,omitempty" bson:"notificationContact,omitempty"`

	// A list of service orders related to this order (e.g. prerequisite, dependent on)
	OrderRelationship []*ServiceOrderRelationship `json:"orderRelationship" bson:"orderRelationShip,omitempty"`

	// Can be used by consumers to prioritize orders in a Service Order Management system
	Priority *string `json:"priority,omitempty" bson:"priority,omitempty"`

	// A list of parties which are involved in this order and the role they are playing
	RelatedParty []*RelatedParty `json:"relatedParty" bson:"relatedParty,omitempty"`

	// Requested delivery date from the requestors perspective
	// Format: date-time
	RequestedCompletionDate *strfmt.DateTime `json:"requestedCompletionDate,omitempty" bson:"requestedCompletionDate,omitempty"`

	// Order start date wished by the requestor
	// Format: date-time
	RequestedStartDate *strfmt.DateTime `json:"requestedStartDate,omitempty" bson:"requestedStartDate,omitempty"`

	// A list of service order items to be processed by this order
	// Required: true
	// Min Items: 1
	ServiceOrderItem []*ServiceOrderItem `json:"serviceOrderItem" bson:"serviceOrderItem"`
}

// Validate validates this service order create
func (m *ServiceOrderCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtSchemaLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCancellationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderRelationship(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceOrderItem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceOrderCreate) validateAtSchemaLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.AtSchemaLocation) { // not required
		return nil
	}

	if err := validate.FormatOf("@schemaLocation", "body", "uri", m.AtSchemaLocation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrderCreate) validateCancellationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CancellationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("cancellationDate", "body", "date-time", m.CancellationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrderCreate) validateExternalReference(formats strfmt.Registry) error {
	if swag.IsZero(m.ExternalReference) { // not required
		return nil
	}

	for i := 0; i < len(m.ExternalReference); i++ {
		if swag.IsZero(m.ExternalReference[i]) { // not required
			continue
		}

		if m.ExternalReference[i] != nil {
			if err := m.ExternalReference[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrderCreate) validateNote(formats strfmt.Registry) error {
	if swag.IsZero(m.Note) { // not required
		return nil
	}

	for i := 0; i < len(m.Note); i++ {
		if swag.IsZero(m.Note[i]) { // not required
			continue
		}

		if m.Note[i] != nil {
			if err := m.Note[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("note" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("note" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrderCreate) validateOrderRelationship(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderRelationship) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderRelationship); i++ {
		if swag.IsZero(m.OrderRelationship[i]) { // not required
			continue
		}

		if m.OrderRelationship[i] != nil {
			if err := m.OrderRelationship[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderRelationship" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrderCreate) validateRelatedParty(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedParty) { // not required
		return nil
	}

	for i := 0; i < len(m.RelatedParty); i++ {
		if swag.IsZero(m.RelatedParty[i]) { // not required
			continue
		}

		if m.RelatedParty[i] != nil {
			if err := m.RelatedParty[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrderCreate) validateRequestedCompletionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedCompletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedCompletionDate", "body", "date-time", m.RequestedCompletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrderCreate) validateRequestedStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("requestedStartDate", "body", "date-time", m.RequestedStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceOrderCreate) validateServiceOrderItem(formats strfmt.Registry) error {

	if err := validate.Required("serviceOrderItem", "body", m.ServiceOrderItem); err != nil {
		return err
	}

	iServiceOrderItemSize := int64(len(m.ServiceOrderItem))

	if err := validate.MinItems("serviceOrderItem", "body", iServiceOrderItemSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.ServiceOrderItem); i++ {
		if swag.IsZero(m.ServiceOrderItem[i]) { // not required
			continue
		}

		if m.ServiceOrderItem[i] != nil {
			if err := m.ServiceOrderItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceOrderItem" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceOrderItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service order create based on the context it is used
func (m *ServiceOrderCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExternalReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderRelationship(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceOrderItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceOrderCreate) contextValidateExternalReference(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExternalReference); i++ {

		if m.ExternalReference[i] != nil {

			if swag.IsZero(m.ExternalReference[i]) { // not required
				return nil
			}

			if err := m.ExternalReference[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("externalReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("externalReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrderCreate) contextValidateNote(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Note); i++ {

		if m.Note[i] != nil {

			if swag.IsZero(m.Note[i]) { // not required
				return nil
			}

			if err := m.Note[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("note" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("note" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrderCreate) contextValidateOrderRelationship(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrderRelationship); i++ {

		if m.OrderRelationship[i] != nil {

			if swag.IsZero(m.OrderRelationship[i]) { // not required
				return nil
			}

			if err := m.OrderRelationship[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderRelationship" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderRelationship" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrderCreate) contextValidateRelatedParty(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RelatedParty); i++ {

		if m.RelatedParty[i] != nil {

			if swag.IsZero(m.RelatedParty[i]) { // not required
				return nil
			}

			if err := m.RelatedParty[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relatedParty" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceOrderCreate) contextValidateServiceOrderItem(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServiceOrderItem); i++ {

		if m.ServiceOrderItem[i] != nil {

			if swag.IsZero(m.ServiceOrderItem[i]) { // not required
				return nil
			}

			if err := m.ServiceOrderItem[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceOrderItem" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("serviceOrderItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceOrderCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceOrderCreate) UnmarshalBinary(b []byte) error {
	var res ServiceOrderCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
