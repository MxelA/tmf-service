// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServiceOrderStateType Possible values for the state of the order
//
// swagger:model ServiceOrderStateType
type ServiceOrderStateType string

func NewServiceOrderStateType(value ServiceOrderStateType) *ServiceOrderStateType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ServiceOrderStateType.
func (m ServiceOrderStateType) Pointer() *ServiceOrderStateType {
	return &m
}

const (

	// ServiceOrderStateTypeAcknowledged captures enum value "acknowledged"
	ServiceOrderStateTypeAcknowledged ServiceOrderStateType = "acknowledged"

	// ServiceOrderStateTypeRejected captures enum value "rejected"
	ServiceOrderStateTypeRejected ServiceOrderStateType = "rejected"

	// ServiceOrderStateTypePending captures enum value "pending"
	ServiceOrderStateTypePending ServiceOrderStateType = "pending"

	// ServiceOrderStateTypeHeld captures enum value "held"
	ServiceOrderStateTypeHeld ServiceOrderStateType = "held"

	// ServiceOrderStateTypeInProgress captures enum value "inProgress"
	ServiceOrderStateTypeInProgress ServiceOrderStateType = "inProgress"

	// ServiceOrderStateTypeCancelled captures enum value "cancelled"
	ServiceOrderStateTypeCancelled ServiceOrderStateType = "cancelled"

	// ServiceOrderStateTypeCompleted captures enum value "completed"
	ServiceOrderStateTypeCompleted ServiceOrderStateType = "completed"

	// ServiceOrderStateTypeFailed captures enum value "failed"
	ServiceOrderStateTypeFailed ServiceOrderStateType = "failed"

	// ServiceOrderStateTypePartial captures enum value "partial"
	ServiceOrderStateTypePartial ServiceOrderStateType = "partial"

	// ServiceOrderStateTypeAssessingCancellation captures enum value "assessingCancellation"
	ServiceOrderStateTypeAssessingCancellation ServiceOrderStateType = "assessingCancellation"

	// ServiceOrderStateTypePendingCancellation captures enum value "pendingCancellation"
	ServiceOrderStateTypePendingCancellation ServiceOrderStateType = "pendingCancellation"
)

// for schema
var serviceOrderStateTypeEnum []interface{}

func init() {
	var res []ServiceOrderStateType
	if err := json.Unmarshal([]byte(`["acknowledged","rejected","pending","held","inProgress","cancelled","completed","failed","partial","assessingCancellation","pendingCancellation"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceOrderStateTypeEnum = append(serviceOrderStateTypeEnum, v)
	}
}

func (m ServiceOrderStateType) validateServiceOrderStateTypeEnum(path, location string, value ServiceOrderStateType) error {
	if err := validate.EnumCase(path, location, value, serviceOrderStateTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this service order state type
func (m ServiceOrderStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceOrderStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this service order state type based on context it is used
func (m ServiceOrderStateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
