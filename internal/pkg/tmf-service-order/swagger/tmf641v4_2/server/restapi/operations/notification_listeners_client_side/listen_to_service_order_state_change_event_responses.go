// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-order/swagger/tmf641v4_2/server/models"
)

// Alex Server response
// ListenToServiceOrderStateChangeEventCreatedCode is the HTTP code returned for type ListenToServiceOrderStateChangeEventCreated
const ListenToServiceOrderStateChangeEventCreatedCode int = 201

/*
ListenToServiceOrderStateChangeEventCreated Notified

swagger:response listenToServiceOrderStateChangeEventCreated
*/
type ListenToServiceOrderStateChangeEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

type ListenToServiceOrderStateChangeEventCreatedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderStateChangeEventCreated creates ListenToServiceOrderStateChangeEventCreated with default headers values
func NewListenToServiceOrderStateChangeEventCreated() *ListenToServiceOrderStateChangeEventCreated {

	return &ListenToServiceOrderStateChangeEventCreated{}
}

// NewListenToServiceOrderStateChangeEventCreated creates ListenToServiceOrderStateChangeEventCreatedRaw with default headers values
func NewListenToServiceOrderStateChangeEventCreatedRaw() *ListenToServiceOrderStateChangeEventCreatedRaw {

	return &ListenToServiceOrderStateChangeEventCreatedRaw{}
}

// WithPayload adds the payload to the listen to service order state change event created response
func (o *ListenToServiceOrderStateChangeEventCreated) WithPayload(payload *models.EventSubscription) *ListenToServiceOrderStateChangeEventCreated {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order state change event created response
func (o *ListenToServiceOrderStateChangeEventCreatedRaw) WithPayload(payload interface{}) *ListenToServiceOrderStateChangeEventCreatedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order state change event created response
func (o *ListenToServiceOrderStateChangeEventCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderStateChangeEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderStateChangeEventCreatedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderStateChangeEventBadRequestCode is the HTTP code returned for type ListenToServiceOrderStateChangeEventBadRequest
const ListenToServiceOrderStateChangeEventBadRequestCode int = 400

/*
ListenToServiceOrderStateChangeEventBadRequest Bad Request

swagger:response listenToServiceOrderStateChangeEventBadRequest
*/
type ListenToServiceOrderStateChangeEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderStateChangeEventBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderStateChangeEventBadRequest creates ListenToServiceOrderStateChangeEventBadRequest with default headers values
func NewListenToServiceOrderStateChangeEventBadRequest() *ListenToServiceOrderStateChangeEventBadRequest {

	return &ListenToServiceOrderStateChangeEventBadRequest{}
}

// NewListenToServiceOrderStateChangeEventBadRequest creates ListenToServiceOrderStateChangeEventBadRequestRaw with default headers values
func NewListenToServiceOrderStateChangeEventBadRequestRaw() *ListenToServiceOrderStateChangeEventBadRequestRaw {

	return &ListenToServiceOrderStateChangeEventBadRequestRaw{}
}

// WithPayload adds the payload to the listen to service order state change event bad request response
func (o *ListenToServiceOrderStateChangeEventBadRequest) WithPayload(payload *models.Error) *ListenToServiceOrderStateChangeEventBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order state change event bad request response
func (o *ListenToServiceOrderStateChangeEventBadRequestRaw) WithPayload(payload interface{}) *ListenToServiceOrderStateChangeEventBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order state change event bad request response
func (o *ListenToServiceOrderStateChangeEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderStateChangeEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderStateChangeEventBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderStateChangeEventUnauthorizedCode is the HTTP code returned for type ListenToServiceOrderStateChangeEventUnauthorized
const ListenToServiceOrderStateChangeEventUnauthorizedCode int = 401

/*
ListenToServiceOrderStateChangeEventUnauthorized Unauthorized

swagger:response listenToServiceOrderStateChangeEventUnauthorized
*/
type ListenToServiceOrderStateChangeEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderStateChangeEventUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderStateChangeEventUnauthorized creates ListenToServiceOrderStateChangeEventUnauthorized with default headers values
func NewListenToServiceOrderStateChangeEventUnauthorized() *ListenToServiceOrderStateChangeEventUnauthorized {

	return &ListenToServiceOrderStateChangeEventUnauthorized{}
}

// NewListenToServiceOrderStateChangeEventUnauthorized creates ListenToServiceOrderStateChangeEventUnauthorizedRaw with default headers values
func NewListenToServiceOrderStateChangeEventUnauthorizedRaw() *ListenToServiceOrderStateChangeEventUnauthorizedRaw {

	return &ListenToServiceOrderStateChangeEventUnauthorizedRaw{}
}

// WithPayload adds the payload to the listen to service order state change event unauthorized response
func (o *ListenToServiceOrderStateChangeEventUnauthorized) WithPayload(payload *models.Error) *ListenToServiceOrderStateChangeEventUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order state change event unauthorized response
func (o *ListenToServiceOrderStateChangeEventUnauthorizedRaw) WithPayload(payload interface{}) *ListenToServiceOrderStateChangeEventUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order state change event unauthorized response
func (o *ListenToServiceOrderStateChangeEventUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderStateChangeEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderStateChangeEventUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderStateChangeEventForbiddenCode is the HTTP code returned for type ListenToServiceOrderStateChangeEventForbidden
const ListenToServiceOrderStateChangeEventForbiddenCode int = 403

/*
ListenToServiceOrderStateChangeEventForbidden Forbidden

swagger:response listenToServiceOrderStateChangeEventForbidden
*/
type ListenToServiceOrderStateChangeEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderStateChangeEventForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderStateChangeEventForbidden creates ListenToServiceOrderStateChangeEventForbidden with default headers values
func NewListenToServiceOrderStateChangeEventForbidden() *ListenToServiceOrderStateChangeEventForbidden {

	return &ListenToServiceOrderStateChangeEventForbidden{}
}

// NewListenToServiceOrderStateChangeEventForbidden creates ListenToServiceOrderStateChangeEventForbiddenRaw with default headers values
func NewListenToServiceOrderStateChangeEventForbiddenRaw() *ListenToServiceOrderStateChangeEventForbiddenRaw {

	return &ListenToServiceOrderStateChangeEventForbiddenRaw{}
}

// WithPayload adds the payload to the listen to service order state change event forbidden response
func (o *ListenToServiceOrderStateChangeEventForbidden) WithPayload(payload *models.Error) *ListenToServiceOrderStateChangeEventForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order state change event forbidden response
func (o *ListenToServiceOrderStateChangeEventForbiddenRaw) WithPayload(payload interface{}) *ListenToServiceOrderStateChangeEventForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order state change event forbidden response
func (o *ListenToServiceOrderStateChangeEventForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderStateChangeEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderStateChangeEventForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderStateChangeEventNotFoundCode is the HTTP code returned for type ListenToServiceOrderStateChangeEventNotFound
const ListenToServiceOrderStateChangeEventNotFoundCode int = 404

/*
ListenToServiceOrderStateChangeEventNotFound Not Found

swagger:response listenToServiceOrderStateChangeEventNotFound
*/
type ListenToServiceOrderStateChangeEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderStateChangeEventNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderStateChangeEventNotFound creates ListenToServiceOrderStateChangeEventNotFound with default headers values
func NewListenToServiceOrderStateChangeEventNotFound() *ListenToServiceOrderStateChangeEventNotFound {

	return &ListenToServiceOrderStateChangeEventNotFound{}
}

// NewListenToServiceOrderStateChangeEventNotFound creates ListenToServiceOrderStateChangeEventNotFoundRaw with default headers values
func NewListenToServiceOrderStateChangeEventNotFoundRaw() *ListenToServiceOrderStateChangeEventNotFoundRaw {

	return &ListenToServiceOrderStateChangeEventNotFoundRaw{}
}

// WithPayload adds the payload to the listen to service order state change event not found response
func (o *ListenToServiceOrderStateChangeEventNotFound) WithPayload(payload *models.Error) *ListenToServiceOrderStateChangeEventNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order state change event not found response
func (o *ListenToServiceOrderStateChangeEventNotFoundRaw) WithPayload(payload interface{}) *ListenToServiceOrderStateChangeEventNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order state change event not found response
func (o *ListenToServiceOrderStateChangeEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderStateChangeEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderStateChangeEventNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderStateChangeEventMethodNotAllowedCode is the HTTP code returned for type ListenToServiceOrderStateChangeEventMethodNotAllowed
const ListenToServiceOrderStateChangeEventMethodNotAllowedCode int = 405

/*
ListenToServiceOrderStateChangeEventMethodNotAllowed Method Not allowed

swagger:response listenToServiceOrderStateChangeEventMethodNotAllowed
*/
type ListenToServiceOrderStateChangeEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderStateChangeEventMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderStateChangeEventMethodNotAllowed creates ListenToServiceOrderStateChangeEventMethodNotAllowed with default headers values
func NewListenToServiceOrderStateChangeEventMethodNotAllowed() *ListenToServiceOrderStateChangeEventMethodNotAllowed {

	return &ListenToServiceOrderStateChangeEventMethodNotAllowed{}
}

// NewListenToServiceOrderStateChangeEventMethodNotAllowed creates ListenToServiceOrderStateChangeEventMethodNotAllowedRaw with default headers values
func NewListenToServiceOrderStateChangeEventMethodNotAllowedRaw() *ListenToServiceOrderStateChangeEventMethodNotAllowedRaw {

	return &ListenToServiceOrderStateChangeEventMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the listen to service order state change event method not allowed response
func (o *ListenToServiceOrderStateChangeEventMethodNotAllowed) WithPayload(payload *models.Error) *ListenToServiceOrderStateChangeEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order state change event method not allowed response
func (o *ListenToServiceOrderStateChangeEventMethodNotAllowedRaw) WithPayload(payload interface{}) *ListenToServiceOrderStateChangeEventMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order state change event method not allowed response
func (o *ListenToServiceOrderStateChangeEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderStateChangeEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderStateChangeEventMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderStateChangeEventConflictCode is the HTTP code returned for type ListenToServiceOrderStateChangeEventConflict
const ListenToServiceOrderStateChangeEventConflictCode int = 409

/*
ListenToServiceOrderStateChangeEventConflict Conflict

swagger:response listenToServiceOrderStateChangeEventConflict
*/
type ListenToServiceOrderStateChangeEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderStateChangeEventConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderStateChangeEventConflict creates ListenToServiceOrderStateChangeEventConflict with default headers values
func NewListenToServiceOrderStateChangeEventConflict() *ListenToServiceOrderStateChangeEventConflict {

	return &ListenToServiceOrderStateChangeEventConflict{}
}

// NewListenToServiceOrderStateChangeEventConflict creates ListenToServiceOrderStateChangeEventConflictRaw with default headers values
func NewListenToServiceOrderStateChangeEventConflictRaw() *ListenToServiceOrderStateChangeEventConflictRaw {

	return &ListenToServiceOrderStateChangeEventConflictRaw{}
}

// WithPayload adds the payload to the listen to service order state change event conflict response
func (o *ListenToServiceOrderStateChangeEventConflict) WithPayload(payload *models.Error) *ListenToServiceOrderStateChangeEventConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order state change event conflict response
func (o *ListenToServiceOrderStateChangeEventConflictRaw) WithPayload(payload interface{}) *ListenToServiceOrderStateChangeEventConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order state change event conflict response
func (o *ListenToServiceOrderStateChangeEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderStateChangeEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderStateChangeEventConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderStateChangeEventInternalServerErrorCode is the HTTP code returned for type ListenToServiceOrderStateChangeEventInternalServerError
const ListenToServiceOrderStateChangeEventInternalServerErrorCode int = 500

/*
ListenToServiceOrderStateChangeEventInternalServerError Internal Server Error

swagger:response listenToServiceOrderStateChangeEventInternalServerError
*/
type ListenToServiceOrderStateChangeEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderStateChangeEventInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderStateChangeEventInternalServerError creates ListenToServiceOrderStateChangeEventInternalServerError with default headers values
func NewListenToServiceOrderStateChangeEventInternalServerError() *ListenToServiceOrderStateChangeEventInternalServerError {

	return &ListenToServiceOrderStateChangeEventInternalServerError{}
}

// NewListenToServiceOrderStateChangeEventInternalServerError creates ListenToServiceOrderStateChangeEventInternalServerErrorRaw with default headers values
func NewListenToServiceOrderStateChangeEventInternalServerErrorRaw() *ListenToServiceOrderStateChangeEventInternalServerErrorRaw {

	return &ListenToServiceOrderStateChangeEventInternalServerErrorRaw{}
}

// WithPayload adds the payload to the listen to service order state change event internal server error response
func (o *ListenToServiceOrderStateChangeEventInternalServerError) WithPayload(payload *models.Error) *ListenToServiceOrderStateChangeEventInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order state change event internal server error response
func (o *ListenToServiceOrderStateChangeEventInternalServerErrorRaw) WithPayload(payload interface{}) *ListenToServiceOrderStateChangeEventInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order state change event internal server error response
func (o *ListenToServiceOrderStateChangeEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderStateChangeEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderStateChangeEventInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
