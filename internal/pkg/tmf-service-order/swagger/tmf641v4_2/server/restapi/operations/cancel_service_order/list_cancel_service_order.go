// Code generated by go-swagger; DO NOT EDIT.

package cancel_service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListCancelServiceOrderHandlerFunc turns a function with the right signature into a list cancel service order handler
type ListCancelServiceOrderHandlerFunc func(ListCancelServiceOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListCancelServiceOrderHandlerFunc) Handle(params ListCancelServiceOrderParams) middleware.Responder {
	return fn(params)
}

// ListCancelServiceOrderHandler interface for that can handle valid list cancel service order params
type ListCancelServiceOrderHandler interface {
	Handle(ListCancelServiceOrderParams) middleware.Responder
}

// NewListCancelServiceOrder creates a new http.Handler for the list cancel service order operation
func NewListCancelServiceOrder(ctx *middleware.Context, handler ListCancelServiceOrderHandler) *ListCancelServiceOrder {
	return &ListCancelServiceOrder{Context: ctx, Handler: handler}
}

/*
	ListCancelServiceOrder swagger:route GET /cancelServiceOrder cancelServiceOrder listCancelServiceOrder

# List or find CancelServiceOrder objects

This operation list or find CancelServiceOrder entities
*/
type ListCancelServiceOrder struct {
	Context *middleware.Context
	Handler ListCancelServiceOrderHandler
}

func (o *ListCancelServiceOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListCancelServiceOrderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
