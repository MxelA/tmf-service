// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-order/swagger/tmf641v4_2/server/models"
)

// Alex Server response
// ListenToCancelServiceOrderStateChangeEventCreatedCode is the HTTP code returned for type ListenToCancelServiceOrderStateChangeEventCreated
const ListenToCancelServiceOrderStateChangeEventCreatedCode int = 201

/*
ListenToCancelServiceOrderStateChangeEventCreated Notified

swagger:response listenToCancelServiceOrderStateChangeEventCreated
*/
type ListenToCancelServiceOrderStateChangeEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

type ListenToCancelServiceOrderStateChangeEventCreatedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToCancelServiceOrderStateChangeEventCreated creates ListenToCancelServiceOrderStateChangeEventCreated with default headers values
func NewListenToCancelServiceOrderStateChangeEventCreated() *ListenToCancelServiceOrderStateChangeEventCreated {

	return &ListenToCancelServiceOrderStateChangeEventCreated{}
}

// NewListenToCancelServiceOrderStateChangeEventCreated creates ListenToCancelServiceOrderStateChangeEventCreatedRaw with default headers values
func NewListenToCancelServiceOrderStateChangeEventCreatedRaw() *ListenToCancelServiceOrderStateChangeEventCreatedRaw {

	return &ListenToCancelServiceOrderStateChangeEventCreatedRaw{}
}

// WithPayload adds the payload to the listen to cancel service order state change event created response
func (o *ListenToCancelServiceOrderStateChangeEventCreated) WithPayload(payload *models.EventSubscription) *ListenToCancelServiceOrderStateChangeEventCreated {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to cancel service order state change event created response
func (o *ListenToCancelServiceOrderStateChangeEventCreatedRaw) WithPayload(payload interface{}) *ListenToCancelServiceOrderStateChangeEventCreatedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to cancel service order state change event created response
func (o *ListenToCancelServiceOrderStateChangeEventCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToCancelServiceOrderStateChangeEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToCancelServiceOrderStateChangeEventCreatedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToCancelServiceOrderStateChangeEventBadRequestCode is the HTTP code returned for type ListenToCancelServiceOrderStateChangeEventBadRequest
const ListenToCancelServiceOrderStateChangeEventBadRequestCode int = 400

/*
ListenToCancelServiceOrderStateChangeEventBadRequest Bad Request

swagger:response listenToCancelServiceOrderStateChangeEventBadRequest
*/
type ListenToCancelServiceOrderStateChangeEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToCancelServiceOrderStateChangeEventBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToCancelServiceOrderStateChangeEventBadRequest creates ListenToCancelServiceOrderStateChangeEventBadRequest with default headers values
func NewListenToCancelServiceOrderStateChangeEventBadRequest() *ListenToCancelServiceOrderStateChangeEventBadRequest {

	return &ListenToCancelServiceOrderStateChangeEventBadRequest{}
}

// NewListenToCancelServiceOrderStateChangeEventBadRequest creates ListenToCancelServiceOrderStateChangeEventBadRequestRaw with default headers values
func NewListenToCancelServiceOrderStateChangeEventBadRequestRaw() *ListenToCancelServiceOrderStateChangeEventBadRequestRaw {

	return &ListenToCancelServiceOrderStateChangeEventBadRequestRaw{}
}

// WithPayload adds the payload to the listen to cancel service order state change event bad request response
func (o *ListenToCancelServiceOrderStateChangeEventBadRequest) WithPayload(payload *models.Error) *ListenToCancelServiceOrderStateChangeEventBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to cancel service order state change event bad request response
func (o *ListenToCancelServiceOrderStateChangeEventBadRequestRaw) WithPayload(payload interface{}) *ListenToCancelServiceOrderStateChangeEventBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to cancel service order state change event bad request response
func (o *ListenToCancelServiceOrderStateChangeEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToCancelServiceOrderStateChangeEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToCancelServiceOrderStateChangeEventBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToCancelServiceOrderStateChangeEventUnauthorizedCode is the HTTP code returned for type ListenToCancelServiceOrderStateChangeEventUnauthorized
const ListenToCancelServiceOrderStateChangeEventUnauthorizedCode int = 401

/*
ListenToCancelServiceOrderStateChangeEventUnauthorized Unauthorized

swagger:response listenToCancelServiceOrderStateChangeEventUnauthorized
*/
type ListenToCancelServiceOrderStateChangeEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToCancelServiceOrderStateChangeEventUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToCancelServiceOrderStateChangeEventUnauthorized creates ListenToCancelServiceOrderStateChangeEventUnauthorized with default headers values
func NewListenToCancelServiceOrderStateChangeEventUnauthorized() *ListenToCancelServiceOrderStateChangeEventUnauthorized {

	return &ListenToCancelServiceOrderStateChangeEventUnauthorized{}
}

// NewListenToCancelServiceOrderStateChangeEventUnauthorized creates ListenToCancelServiceOrderStateChangeEventUnauthorizedRaw with default headers values
func NewListenToCancelServiceOrderStateChangeEventUnauthorizedRaw() *ListenToCancelServiceOrderStateChangeEventUnauthorizedRaw {

	return &ListenToCancelServiceOrderStateChangeEventUnauthorizedRaw{}
}

// WithPayload adds the payload to the listen to cancel service order state change event unauthorized response
func (o *ListenToCancelServiceOrderStateChangeEventUnauthorized) WithPayload(payload *models.Error) *ListenToCancelServiceOrderStateChangeEventUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to cancel service order state change event unauthorized response
func (o *ListenToCancelServiceOrderStateChangeEventUnauthorizedRaw) WithPayload(payload interface{}) *ListenToCancelServiceOrderStateChangeEventUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to cancel service order state change event unauthorized response
func (o *ListenToCancelServiceOrderStateChangeEventUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToCancelServiceOrderStateChangeEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToCancelServiceOrderStateChangeEventUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToCancelServiceOrderStateChangeEventForbiddenCode is the HTTP code returned for type ListenToCancelServiceOrderStateChangeEventForbidden
const ListenToCancelServiceOrderStateChangeEventForbiddenCode int = 403

/*
ListenToCancelServiceOrderStateChangeEventForbidden Forbidden

swagger:response listenToCancelServiceOrderStateChangeEventForbidden
*/
type ListenToCancelServiceOrderStateChangeEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToCancelServiceOrderStateChangeEventForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToCancelServiceOrderStateChangeEventForbidden creates ListenToCancelServiceOrderStateChangeEventForbidden with default headers values
func NewListenToCancelServiceOrderStateChangeEventForbidden() *ListenToCancelServiceOrderStateChangeEventForbidden {

	return &ListenToCancelServiceOrderStateChangeEventForbidden{}
}

// NewListenToCancelServiceOrderStateChangeEventForbidden creates ListenToCancelServiceOrderStateChangeEventForbiddenRaw with default headers values
func NewListenToCancelServiceOrderStateChangeEventForbiddenRaw() *ListenToCancelServiceOrderStateChangeEventForbiddenRaw {

	return &ListenToCancelServiceOrderStateChangeEventForbiddenRaw{}
}

// WithPayload adds the payload to the listen to cancel service order state change event forbidden response
func (o *ListenToCancelServiceOrderStateChangeEventForbidden) WithPayload(payload *models.Error) *ListenToCancelServiceOrderStateChangeEventForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to cancel service order state change event forbidden response
func (o *ListenToCancelServiceOrderStateChangeEventForbiddenRaw) WithPayload(payload interface{}) *ListenToCancelServiceOrderStateChangeEventForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to cancel service order state change event forbidden response
func (o *ListenToCancelServiceOrderStateChangeEventForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToCancelServiceOrderStateChangeEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToCancelServiceOrderStateChangeEventForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToCancelServiceOrderStateChangeEventNotFoundCode is the HTTP code returned for type ListenToCancelServiceOrderStateChangeEventNotFound
const ListenToCancelServiceOrderStateChangeEventNotFoundCode int = 404

/*
ListenToCancelServiceOrderStateChangeEventNotFound Not Found

swagger:response listenToCancelServiceOrderStateChangeEventNotFound
*/
type ListenToCancelServiceOrderStateChangeEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToCancelServiceOrderStateChangeEventNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToCancelServiceOrderStateChangeEventNotFound creates ListenToCancelServiceOrderStateChangeEventNotFound with default headers values
func NewListenToCancelServiceOrderStateChangeEventNotFound() *ListenToCancelServiceOrderStateChangeEventNotFound {

	return &ListenToCancelServiceOrderStateChangeEventNotFound{}
}

// NewListenToCancelServiceOrderStateChangeEventNotFound creates ListenToCancelServiceOrderStateChangeEventNotFoundRaw with default headers values
func NewListenToCancelServiceOrderStateChangeEventNotFoundRaw() *ListenToCancelServiceOrderStateChangeEventNotFoundRaw {

	return &ListenToCancelServiceOrderStateChangeEventNotFoundRaw{}
}

// WithPayload adds the payload to the listen to cancel service order state change event not found response
func (o *ListenToCancelServiceOrderStateChangeEventNotFound) WithPayload(payload *models.Error) *ListenToCancelServiceOrderStateChangeEventNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to cancel service order state change event not found response
func (o *ListenToCancelServiceOrderStateChangeEventNotFoundRaw) WithPayload(payload interface{}) *ListenToCancelServiceOrderStateChangeEventNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to cancel service order state change event not found response
func (o *ListenToCancelServiceOrderStateChangeEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToCancelServiceOrderStateChangeEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToCancelServiceOrderStateChangeEventNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToCancelServiceOrderStateChangeEventMethodNotAllowedCode is the HTTP code returned for type ListenToCancelServiceOrderStateChangeEventMethodNotAllowed
const ListenToCancelServiceOrderStateChangeEventMethodNotAllowedCode int = 405

/*
ListenToCancelServiceOrderStateChangeEventMethodNotAllowed Method Not allowed

swagger:response listenToCancelServiceOrderStateChangeEventMethodNotAllowed
*/
type ListenToCancelServiceOrderStateChangeEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToCancelServiceOrderStateChangeEventMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToCancelServiceOrderStateChangeEventMethodNotAllowed creates ListenToCancelServiceOrderStateChangeEventMethodNotAllowed with default headers values
func NewListenToCancelServiceOrderStateChangeEventMethodNotAllowed() *ListenToCancelServiceOrderStateChangeEventMethodNotAllowed {

	return &ListenToCancelServiceOrderStateChangeEventMethodNotAllowed{}
}

// NewListenToCancelServiceOrderStateChangeEventMethodNotAllowed creates ListenToCancelServiceOrderStateChangeEventMethodNotAllowedRaw with default headers values
func NewListenToCancelServiceOrderStateChangeEventMethodNotAllowedRaw() *ListenToCancelServiceOrderStateChangeEventMethodNotAllowedRaw {

	return &ListenToCancelServiceOrderStateChangeEventMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the listen to cancel service order state change event method not allowed response
func (o *ListenToCancelServiceOrderStateChangeEventMethodNotAllowed) WithPayload(payload *models.Error) *ListenToCancelServiceOrderStateChangeEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to cancel service order state change event method not allowed response
func (o *ListenToCancelServiceOrderStateChangeEventMethodNotAllowedRaw) WithPayload(payload interface{}) *ListenToCancelServiceOrderStateChangeEventMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to cancel service order state change event method not allowed response
func (o *ListenToCancelServiceOrderStateChangeEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToCancelServiceOrderStateChangeEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToCancelServiceOrderStateChangeEventMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToCancelServiceOrderStateChangeEventConflictCode is the HTTP code returned for type ListenToCancelServiceOrderStateChangeEventConflict
const ListenToCancelServiceOrderStateChangeEventConflictCode int = 409

/*
ListenToCancelServiceOrderStateChangeEventConflict Conflict

swagger:response listenToCancelServiceOrderStateChangeEventConflict
*/
type ListenToCancelServiceOrderStateChangeEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToCancelServiceOrderStateChangeEventConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToCancelServiceOrderStateChangeEventConflict creates ListenToCancelServiceOrderStateChangeEventConflict with default headers values
func NewListenToCancelServiceOrderStateChangeEventConflict() *ListenToCancelServiceOrderStateChangeEventConflict {

	return &ListenToCancelServiceOrderStateChangeEventConflict{}
}

// NewListenToCancelServiceOrderStateChangeEventConflict creates ListenToCancelServiceOrderStateChangeEventConflictRaw with default headers values
func NewListenToCancelServiceOrderStateChangeEventConflictRaw() *ListenToCancelServiceOrderStateChangeEventConflictRaw {

	return &ListenToCancelServiceOrderStateChangeEventConflictRaw{}
}

// WithPayload adds the payload to the listen to cancel service order state change event conflict response
func (o *ListenToCancelServiceOrderStateChangeEventConflict) WithPayload(payload *models.Error) *ListenToCancelServiceOrderStateChangeEventConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to cancel service order state change event conflict response
func (o *ListenToCancelServiceOrderStateChangeEventConflictRaw) WithPayload(payload interface{}) *ListenToCancelServiceOrderStateChangeEventConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to cancel service order state change event conflict response
func (o *ListenToCancelServiceOrderStateChangeEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToCancelServiceOrderStateChangeEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToCancelServiceOrderStateChangeEventConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToCancelServiceOrderStateChangeEventInternalServerErrorCode is the HTTP code returned for type ListenToCancelServiceOrderStateChangeEventInternalServerError
const ListenToCancelServiceOrderStateChangeEventInternalServerErrorCode int = 500

/*
ListenToCancelServiceOrderStateChangeEventInternalServerError Internal Server Error

swagger:response listenToCancelServiceOrderStateChangeEventInternalServerError
*/
type ListenToCancelServiceOrderStateChangeEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToCancelServiceOrderStateChangeEventInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToCancelServiceOrderStateChangeEventInternalServerError creates ListenToCancelServiceOrderStateChangeEventInternalServerError with default headers values
func NewListenToCancelServiceOrderStateChangeEventInternalServerError() *ListenToCancelServiceOrderStateChangeEventInternalServerError {

	return &ListenToCancelServiceOrderStateChangeEventInternalServerError{}
}

// NewListenToCancelServiceOrderStateChangeEventInternalServerError creates ListenToCancelServiceOrderStateChangeEventInternalServerErrorRaw with default headers values
func NewListenToCancelServiceOrderStateChangeEventInternalServerErrorRaw() *ListenToCancelServiceOrderStateChangeEventInternalServerErrorRaw {

	return &ListenToCancelServiceOrderStateChangeEventInternalServerErrorRaw{}
}

// WithPayload adds the payload to the listen to cancel service order state change event internal server error response
func (o *ListenToCancelServiceOrderStateChangeEventInternalServerError) WithPayload(payload *models.Error) *ListenToCancelServiceOrderStateChangeEventInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to cancel service order state change event internal server error response
func (o *ListenToCancelServiceOrderStateChangeEventInternalServerErrorRaw) WithPayload(payload interface{}) *ListenToCancelServiceOrderStateChangeEventInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to cancel service order state change event internal server error response
func (o *ListenToCancelServiceOrderStateChangeEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToCancelServiceOrderStateChangeEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToCancelServiceOrderStateChangeEventInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
