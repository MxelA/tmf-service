// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-order/swagger/tmf641v4_2/server/restapi/operations/cancel_service_order"
	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-order/swagger/tmf641v4_2/server/restapi/operations/events_subscription"
	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-order/swagger/tmf641v4_2/server/restapi/operations/notification_listeners_client_side"
	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-order/swagger/tmf641v4_2/server/restapi/operations/service_order"
)

// NewTmfServiceOrderV42API creates a new TmfServiceOrderV42 instance
func NewTmfServiceOrderV42API(spec *loads.Document) *TmfServiceOrderV42API {
	return &TmfServiceOrderV42API{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		CancelServiceOrderCreateCancelServiceOrderHandler: cancel_service_order.CreateCancelServiceOrderHandlerFunc(func(params cancel_service_order.CreateCancelServiceOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation cancel_service_order.CreateCancelServiceOrder has not yet been implemented")
		}),
		ServiceOrderCreateServiceOrderHandler: service_order.CreateServiceOrderHandlerFunc(func(params service_order.CreateServiceOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation service_order.CreateServiceOrder has not yet been implemented")
		}),
		ServiceOrderDeleteServiceOrderHandler: service_order.DeleteServiceOrderHandlerFunc(func(params service_order.DeleteServiceOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation service_order.DeleteServiceOrder has not yet been implemented")
		}),
		CancelServiceOrderListCancelServiceOrderHandler: cancel_service_order.ListCancelServiceOrderHandlerFunc(func(params cancel_service_order.ListCancelServiceOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation cancel_service_order.ListCancelServiceOrder has not yet been implemented")
		}),
		ServiceOrderListServiceOrderHandler: service_order.ListServiceOrderHandlerFunc(func(params service_order.ListServiceOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation service_order.ListServiceOrder has not yet been implemented")
		}),
		NotificationListenersClientSideListenToCancelServiceOrderCreateEventHandler: notification_listeners_client_side.ListenToCancelServiceOrderCreateEventHandlerFunc(func(params notification_listeners_client_side.ListenToCancelServiceOrderCreateEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToCancelServiceOrderCreateEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToCancelServiceOrderInformationRequiredEventHandler: notification_listeners_client_side.ListenToCancelServiceOrderInformationRequiredEventHandlerFunc(func(params notification_listeners_client_side.ListenToCancelServiceOrderInformationRequiredEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToCancelServiceOrderInformationRequiredEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToCancelServiceOrderStateChangeEventHandler: notification_listeners_client_side.ListenToCancelServiceOrderStateChangeEventHandlerFunc(func(params notification_listeners_client_side.ListenToCancelServiceOrderStateChangeEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToCancelServiceOrderStateChangeEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceOrderAttributeValueChangeEventHandler: notification_listeners_client_side.ListenToServiceOrderAttributeValueChangeEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceOrderAttributeValueChangeEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceOrderAttributeValueChangeEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceOrderCreateEventHandler: notification_listeners_client_side.ListenToServiceOrderCreateEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceOrderCreateEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceOrderCreateEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceOrderDeleteEventHandler: notification_listeners_client_side.ListenToServiceOrderDeleteEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceOrderDeleteEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceOrderDeleteEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceOrderInformationRequiredEventHandler: notification_listeners_client_side.ListenToServiceOrderInformationRequiredEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceOrderInformationRequiredEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceOrderInformationRequiredEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceOrderJeopardyEventHandler: notification_listeners_client_side.ListenToServiceOrderJeopardyEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceOrderJeopardyEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceOrderJeopardyEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceOrderMilestoneEventHandler: notification_listeners_client_side.ListenToServiceOrderMilestoneEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceOrderMilestoneEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceOrderMilestoneEvent has not yet been implemented")
		}),
		NotificationListenersClientSideListenToServiceOrderStateChangeEventHandler: notification_listeners_client_side.ListenToServiceOrderStateChangeEventHandlerFunc(func(params notification_listeners_client_side.ListenToServiceOrderStateChangeEventParams) middleware.Responder {
			return middleware.NotImplemented("operation notification_listeners_client_side.ListenToServiceOrderStateChangeEvent has not yet been implemented")
		}),
		ServiceOrderPatchServiceOrderHandler: service_order.PatchServiceOrderHandlerFunc(func(params service_order.PatchServiceOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation service_order.PatchServiceOrder has not yet been implemented")
		}),
		EventsSubscriptionRegisterListenerHandler: events_subscription.RegisterListenerHandlerFunc(func(params events_subscription.RegisterListenerParams) middleware.Responder {
			return middleware.NotImplemented("operation events_subscription.RegisterListener has not yet been implemented")
		}),
		CancelServiceOrderRetrieveCancelServiceOrderHandler: cancel_service_order.RetrieveCancelServiceOrderHandlerFunc(func(params cancel_service_order.RetrieveCancelServiceOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation cancel_service_order.RetrieveCancelServiceOrder has not yet been implemented")
		}),
		ServiceOrderRetrieveServiceOrderHandler: service_order.RetrieveServiceOrderHandlerFunc(func(params service_order.RetrieveServiceOrderParams) middleware.Responder {
			return middleware.NotImplemented("operation service_order.RetrieveServiceOrder has not yet been implemented")
		}),
		EventsSubscriptionUnregisterListenerHandler: events_subscription.UnregisterListenerHandlerFunc(func(params events_subscription.UnregisterListenerParams) middleware.Responder {
			return middleware.NotImplemented("operation events_subscription.UnregisterListener has not yet been implemented")
		}),
	}
}

/*
TmfServiceOrderV42API ## TMF API Reference : TMF 641 - Service Ordering Management

	Version 4.2.0

The Service Order API provides a standardized mechanism for managing Service Order, a type of order which can be used to place an order between internal Customer Order management system to service order management system or between a service provider and a partner and vice versa.

### Service Order resource
A service order will describe a list of service order items.  A service order item references an action on an existing  or  future  service.  By  service  we  designed  Customer Facing  Service  (CFS)  as  well  as  Resource Facing Service (RFS).
From a component perspective, a service order should be available
- from a Service Orchestration Component (and it could mix CFS and RFS)
- from an Infrastructure Control & Management component (and it would have only RFS)

### TMF641 performs the following operations on service order resource :
- Retrieval of a service order or a collection of service orders depending on filter criteria
- Partial update of a service order (including updating rules)
- Creation of a service order (including default values and creation rules)
- Deletion of service order (for administration purposes)
- Notification of events on Service order

**Cancel Service Order resource**

This resource is used to request a service order cancellation.

**TMF641 provides following operations on Cancel Service Order resource :**

- Retrieval of a cancel service order or a collection of cancel service orders
- Creation of a cancel service order
- Notification of events on cancel service order.

Copyright © TM Forum 2020. All Rights Reserved
*/
type TmfServiceOrderV42API struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	//   - application/json-patch+json
	//   - application/merge-patch+json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// CancelServiceOrderCreateCancelServiceOrderHandler sets the operation handler for the create cancel service order operation
	CancelServiceOrderCreateCancelServiceOrderHandler cancel_service_order.CreateCancelServiceOrderHandler
	// ServiceOrderCreateServiceOrderHandler sets the operation handler for the create service order operation
	ServiceOrderCreateServiceOrderHandler service_order.CreateServiceOrderHandler
	// ServiceOrderDeleteServiceOrderHandler sets the operation handler for the delete service order operation
	ServiceOrderDeleteServiceOrderHandler service_order.DeleteServiceOrderHandler
	// CancelServiceOrderListCancelServiceOrderHandler sets the operation handler for the list cancel service order operation
	CancelServiceOrderListCancelServiceOrderHandler cancel_service_order.ListCancelServiceOrderHandler
	// ServiceOrderListServiceOrderHandler sets the operation handler for the list service order operation
	ServiceOrderListServiceOrderHandler service_order.ListServiceOrderHandler
	// NotificationListenersClientSideListenToCancelServiceOrderCreateEventHandler sets the operation handler for the listen to cancel service order create event operation
	NotificationListenersClientSideListenToCancelServiceOrderCreateEventHandler notification_listeners_client_side.ListenToCancelServiceOrderCreateEventHandler
	// NotificationListenersClientSideListenToCancelServiceOrderInformationRequiredEventHandler sets the operation handler for the listen to cancel service order information required event operation
	NotificationListenersClientSideListenToCancelServiceOrderInformationRequiredEventHandler notification_listeners_client_side.ListenToCancelServiceOrderInformationRequiredEventHandler
	// NotificationListenersClientSideListenToCancelServiceOrderStateChangeEventHandler sets the operation handler for the listen to cancel service order state change event operation
	NotificationListenersClientSideListenToCancelServiceOrderStateChangeEventHandler notification_listeners_client_side.ListenToCancelServiceOrderStateChangeEventHandler
	// NotificationListenersClientSideListenToServiceOrderAttributeValueChangeEventHandler sets the operation handler for the listen to service order attribute value change event operation
	NotificationListenersClientSideListenToServiceOrderAttributeValueChangeEventHandler notification_listeners_client_side.ListenToServiceOrderAttributeValueChangeEventHandler
	// NotificationListenersClientSideListenToServiceOrderCreateEventHandler sets the operation handler for the listen to service order create event operation
	NotificationListenersClientSideListenToServiceOrderCreateEventHandler notification_listeners_client_side.ListenToServiceOrderCreateEventHandler
	// NotificationListenersClientSideListenToServiceOrderDeleteEventHandler sets the operation handler for the listen to service order delete event operation
	NotificationListenersClientSideListenToServiceOrderDeleteEventHandler notification_listeners_client_side.ListenToServiceOrderDeleteEventHandler
	// NotificationListenersClientSideListenToServiceOrderInformationRequiredEventHandler sets the operation handler for the listen to service order information required event operation
	NotificationListenersClientSideListenToServiceOrderInformationRequiredEventHandler notification_listeners_client_side.ListenToServiceOrderInformationRequiredEventHandler
	// NotificationListenersClientSideListenToServiceOrderJeopardyEventHandler sets the operation handler for the listen to service order jeopardy event operation
	NotificationListenersClientSideListenToServiceOrderJeopardyEventHandler notification_listeners_client_side.ListenToServiceOrderJeopardyEventHandler
	// NotificationListenersClientSideListenToServiceOrderMilestoneEventHandler sets the operation handler for the listen to service order milestone event operation
	NotificationListenersClientSideListenToServiceOrderMilestoneEventHandler notification_listeners_client_side.ListenToServiceOrderMilestoneEventHandler
	// NotificationListenersClientSideListenToServiceOrderStateChangeEventHandler sets the operation handler for the listen to service order state change event operation
	NotificationListenersClientSideListenToServiceOrderStateChangeEventHandler notification_listeners_client_side.ListenToServiceOrderStateChangeEventHandler
	// ServiceOrderPatchServiceOrderHandler sets the operation handler for the patch service order operation
	ServiceOrderPatchServiceOrderHandler service_order.PatchServiceOrderHandler
	// EventsSubscriptionRegisterListenerHandler sets the operation handler for the register listener operation
	EventsSubscriptionRegisterListenerHandler events_subscription.RegisterListenerHandler
	// CancelServiceOrderRetrieveCancelServiceOrderHandler sets the operation handler for the retrieve cancel service order operation
	CancelServiceOrderRetrieveCancelServiceOrderHandler cancel_service_order.RetrieveCancelServiceOrderHandler
	// ServiceOrderRetrieveServiceOrderHandler sets the operation handler for the retrieve service order operation
	ServiceOrderRetrieveServiceOrderHandler service_order.RetrieveServiceOrderHandler
	// EventsSubscriptionUnregisterListenerHandler sets the operation handler for the unregister listener operation
	EventsSubscriptionUnregisterListenerHandler events_subscription.UnregisterListenerHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *TmfServiceOrderV42API) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *TmfServiceOrderV42API) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *TmfServiceOrderV42API) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TmfServiceOrderV42API) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TmfServiceOrderV42API) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TmfServiceOrderV42API) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TmfServiceOrderV42API) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TmfServiceOrderV42API) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TmfServiceOrderV42API) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TmfServiceOrderV42API
func (o *TmfServiceOrderV42API) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CancelServiceOrderCreateCancelServiceOrderHandler == nil {
		unregistered = append(unregistered, "cancel_service_order.CreateCancelServiceOrderHandler")
	}
	if o.ServiceOrderCreateServiceOrderHandler == nil {
		unregistered = append(unregistered, "service_order.CreateServiceOrderHandler")
	}
	if o.ServiceOrderDeleteServiceOrderHandler == nil {
		unregistered = append(unregistered, "service_order.DeleteServiceOrderHandler")
	}
	if o.CancelServiceOrderListCancelServiceOrderHandler == nil {
		unregistered = append(unregistered, "cancel_service_order.ListCancelServiceOrderHandler")
	}
	if o.ServiceOrderListServiceOrderHandler == nil {
		unregistered = append(unregistered, "service_order.ListServiceOrderHandler")
	}
	if o.NotificationListenersClientSideListenToCancelServiceOrderCreateEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToCancelServiceOrderCreateEventHandler")
	}
	if o.NotificationListenersClientSideListenToCancelServiceOrderInformationRequiredEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToCancelServiceOrderInformationRequiredEventHandler")
	}
	if o.NotificationListenersClientSideListenToCancelServiceOrderStateChangeEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToCancelServiceOrderStateChangeEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceOrderAttributeValueChangeEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceOrderAttributeValueChangeEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceOrderCreateEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceOrderCreateEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceOrderDeleteEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceOrderDeleteEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceOrderInformationRequiredEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceOrderInformationRequiredEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceOrderJeopardyEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceOrderJeopardyEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceOrderMilestoneEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceOrderMilestoneEventHandler")
	}
	if o.NotificationListenersClientSideListenToServiceOrderStateChangeEventHandler == nil {
		unregistered = append(unregistered, "notification_listeners_client_side.ListenToServiceOrderStateChangeEventHandler")
	}
	if o.ServiceOrderPatchServiceOrderHandler == nil {
		unregistered = append(unregistered, "service_order.PatchServiceOrderHandler")
	}
	if o.EventsSubscriptionRegisterListenerHandler == nil {
		unregistered = append(unregistered, "events_subscription.RegisterListenerHandler")
	}
	if o.CancelServiceOrderRetrieveCancelServiceOrderHandler == nil {
		unregistered = append(unregistered, "cancel_service_order.RetrieveCancelServiceOrderHandler")
	}
	if o.ServiceOrderRetrieveServiceOrderHandler == nil {
		unregistered = append(unregistered, "service_order.RetrieveServiceOrderHandler")
	}
	if o.EventsSubscriptionUnregisterListenerHandler == nil {
		unregistered = append(unregistered, "events_subscription.UnregisterListenerHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TmfServiceOrderV42API) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TmfServiceOrderV42API) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *TmfServiceOrderV42API) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *TmfServiceOrderV42API) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/json-patch+json":
			result["application/json-patch+json"] = o.JSONConsumer
		case "application/merge-patch+json":
			result["application/merge-patch+json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *TmfServiceOrderV42API) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TmfServiceOrderV42API) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the tmf service order v42 API
func (o *TmfServiceOrderV42API) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TmfServiceOrderV42API) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cancelServiceOrder"] = cancel_service_order.NewCreateCancelServiceOrder(o.context, o.CancelServiceOrderCreateCancelServiceOrderHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/serviceOrder"] = service_order.NewCreateServiceOrder(o.context, o.ServiceOrderCreateServiceOrderHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/serviceOrder/{id}"] = service_order.NewDeleteServiceOrder(o.context, o.ServiceOrderDeleteServiceOrderHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cancelServiceOrder"] = cancel_service_order.NewListCancelServiceOrder(o.context, o.CancelServiceOrderListCancelServiceOrderHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/serviceOrder"] = service_order.NewListServiceOrder(o.context, o.ServiceOrderListServiceOrderHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/cancelServiceOrderCreateEvent"] = notification_listeners_client_side.NewListenToCancelServiceOrderCreateEvent(o.context, o.NotificationListenersClientSideListenToCancelServiceOrderCreateEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/cancelServiceOrderInformationRequiredEvent"] = notification_listeners_client_side.NewListenToCancelServiceOrderInformationRequiredEvent(o.context, o.NotificationListenersClientSideListenToCancelServiceOrderInformationRequiredEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/cancelServiceOrderStateChangeEvent"] = notification_listeners_client_side.NewListenToCancelServiceOrderStateChangeEvent(o.context, o.NotificationListenersClientSideListenToCancelServiceOrderStateChangeEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceOrderAttributeValueChangeEvent"] = notification_listeners_client_side.NewListenToServiceOrderAttributeValueChangeEvent(o.context, o.NotificationListenersClientSideListenToServiceOrderAttributeValueChangeEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceOrderCreateEvent"] = notification_listeners_client_side.NewListenToServiceOrderCreateEvent(o.context, o.NotificationListenersClientSideListenToServiceOrderCreateEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceOrderDeleteEvent"] = notification_listeners_client_side.NewListenToServiceOrderDeleteEvent(o.context, o.NotificationListenersClientSideListenToServiceOrderDeleteEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceOrderInformationRequiredEvent"] = notification_listeners_client_side.NewListenToServiceOrderInformationRequiredEvent(o.context, o.NotificationListenersClientSideListenToServiceOrderInformationRequiredEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceOrderJeopardyEvent"] = notification_listeners_client_side.NewListenToServiceOrderJeopardyEvent(o.context, o.NotificationListenersClientSideListenToServiceOrderJeopardyEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceOrderMilestoneEvent"] = notification_listeners_client_side.NewListenToServiceOrderMilestoneEvent(o.context, o.NotificationListenersClientSideListenToServiceOrderMilestoneEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/listener/serviceOrderStateChangeEvent"] = notification_listeners_client_side.NewListenToServiceOrderStateChangeEvent(o.context, o.NotificationListenersClientSideListenToServiceOrderStateChangeEventHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/serviceOrder/{id}"] = service_order.NewPatchServiceOrder(o.context, o.ServiceOrderPatchServiceOrderHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/hub"] = events_subscription.NewRegisterListener(o.context, o.EventsSubscriptionRegisterListenerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cancelServiceOrder/{id}"] = cancel_service_order.NewRetrieveCancelServiceOrder(o.context, o.CancelServiceOrderRetrieveCancelServiceOrderHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/serviceOrder/{id}"] = service_order.NewRetrieveServiceOrder(o.context, o.ServiceOrderRetrieveServiceOrderHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/hub/{id}"] = events_subscription.NewUnregisterListener(o.context, o.EventsSubscriptionUnregisterListenerHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TmfServiceOrderV42API) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *TmfServiceOrderV42API) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *TmfServiceOrderV42API) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *TmfServiceOrderV42API) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *TmfServiceOrderV42API) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
