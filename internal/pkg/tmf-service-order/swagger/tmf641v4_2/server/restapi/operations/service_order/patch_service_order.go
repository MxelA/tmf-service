// Code generated by go-swagger; DO NOT EDIT.

package service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchServiceOrderHandlerFunc turns a function with the right signature into a patch service order handler
type PatchServiceOrderHandlerFunc func(PatchServiceOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchServiceOrderHandlerFunc) Handle(params PatchServiceOrderParams) middleware.Responder {
	return fn(params)
}

// PatchServiceOrderHandler interface for that can handle valid patch service order params
type PatchServiceOrderHandler interface {
	Handle(PatchServiceOrderParams) middleware.Responder
}

// NewPatchServiceOrder creates a new http.Handler for the patch service order operation
func NewPatchServiceOrder(ctx *middleware.Context, handler PatchServiceOrderHandler) *PatchServiceOrder {
	return &PatchServiceOrder{Context: ctx, Handler: handler}
}

/*
	PatchServiceOrder swagger:route PATCH /serviceOrder/{id} serviceOrder patchServiceOrder

# Updates partially a ServiceOrder

This operation updates partially a ServiceOrder entity.
*/
type PatchServiceOrder struct {
	Context *middleware.Context
	Handler PatchServiceOrderHandler
}

func (o *PatchServiceOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchServiceOrderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
