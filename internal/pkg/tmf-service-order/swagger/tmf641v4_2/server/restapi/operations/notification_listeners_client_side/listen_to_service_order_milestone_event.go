// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListenToServiceOrderMilestoneEventHandlerFunc turns a function with the right signature into a listen to service order milestone event handler
type ListenToServiceOrderMilestoneEventHandlerFunc func(ListenToServiceOrderMilestoneEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListenToServiceOrderMilestoneEventHandlerFunc) Handle(params ListenToServiceOrderMilestoneEventParams) middleware.Responder {
	return fn(params)
}

// ListenToServiceOrderMilestoneEventHandler interface for that can handle valid listen to service order milestone event params
type ListenToServiceOrderMilestoneEventHandler interface {
	Handle(ListenToServiceOrderMilestoneEventParams) middleware.Responder
}

// NewListenToServiceOrderMilestoneEvent creates a new http.Handler for the listen to service order milestone event operation
func NewListenToServiceOrderMilestoneEvent(ctx *middleware.Context, handler ListenToServiceOrderMilestoneEventHandler) *ListenToServiceOrderMilestoneEvent {
	return &ListenToServiceOrderMilestoneEvent{Context: ctx, Handler: handler}
}

/*
	ListenToServiceOrderMilestoneEvent swagger:route POST /listener/serviceOrderMilestoneEvent notification listeners (client side) listenToServiceOrderMilestoneEvent

# Client listener for entity ServiceOrderMilestoneEvent

Example of a client listener for receiving the notification ServiceOrderMilestoneEvent
*/
type ListenToServiceOrderMilestoneEvent struct {
	Context *middleware.Context
	Handler ListenToServiceOrderMilestoneEventHandler
}

func (o *ListenToServiceOrderMilestoneEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListenToServiceOrderMilestoneEventParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
