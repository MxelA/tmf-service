// Code generated by go-swagger; DO NOT EDIT.

package service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveServiceOrderHandlerFunc turns a function with the right signature into a retrieve service order handler
type RetrieveServiceOrderHandlerFunc func(RetrieveServiceOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveServiceOrderHandlerFunc) Handle(params RetrieveServiceOrderParams) middleware.Responder {
	return fn(params)
}

// RetrieveServiceOrderHandler interface for that can handle valid retrieve service order params
type RetrieveServiceOrderHandler interface {
	Handle(RetrieveServiceOrderParams) middleware.Responder
}

// NewRetrieveServiceOrder creates a new http.Handler for the retrieve service order operation
func NewRetrieveServiceOrder(ctx *middleware.Context, handler RetrieveServiceOrderHandler) *RetrieveServiceOrder {
	return &RetrieveServiceOrder{Context: ctx, Handler: handler}
}

/*
	RetrieveServiceOrder swagger:route GET /serviceOrder/{id} serviceOrder retrieveServiceOrder

# Retrieves a ServiceOrder by ID

This operation retrieves a ServiceOrder entity. Attribute selection is enabled for all first level attributes.
*/
type RetrieveServiceOrder struct {
	Context *middleware.Context
	Handler RetrieveServiceOrderHandler
}

func (o *RetrieveServiceOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRetrieveServiceOrderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
