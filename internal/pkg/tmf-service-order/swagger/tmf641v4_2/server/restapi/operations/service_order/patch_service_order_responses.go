// Code generated by go-swagger; DO NOT EDIT.

package service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-order/swagger/tmf641v4_2/server/models"
)

// Alex Server response
// PatchServiceOrderOKCode is the HTTP code returned for type PatchServiceOrderOK
const PatchServiceOrderOKCode int = 200

/*
PatchServiceOrderOK Updated

swagger:response patchServiceOrderOK
*/
type PatchServiceOrderOK struct {

	/*
	  In: Body
	*/
	Payload *models.ServiceOrder `json:"body,omitempty"`
}

type PatchServiceOrderOKRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceOrderOK creates PatchServiceOrderOK with default headers values
func NewPatchServiceOrderOK() *PatchServiceOrderOK {

	return &PatchServiceOrderOK{}
}

// NewPatchServiceOrderOK creates PatchServiceOrderOKRaw with default headers values
func NewPatchServiceOrderOKRaw() *PatchServiceOrderOKRaw {

	return &PatchServiceOrderOKRaw{}
}

// WithPayload adds the payload to the patch service order o k response
func (o *PatchServiceOrderOK) WithPayload(payload *models.ServiceOrder) *PatchServiceOrderOK {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service order o k response
func (o *PatchServiceOrderOKRaw) WithPayload(payload interface{}) *PatchServiceOrderOKRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service order o k response
func (o *PatchServiceOrderOK) SetPayload(payload *models.ServiceOrder) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceOrderOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceOrderOKRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceOrderBadRequestCode is the HTTP code returned for type PatchServiceOrderBadRequest
const PatchServiceOrderBadRequestCode int = 400

/*
PatchServiceOrderBadRequest Bad Request

swagger:response patchServiceOrderBadRequest
*/
type PatchServiceOrderBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type PatchServiceOrderBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceOrderBadRequest creates PatchServiceOrderBadRequest with default headers values
func NewPatchServiceOrderBadRequest() *PatchServiceOrderBadRequest {

	return &PatchServiceOrderBadRequest{}
}

// NewPatchServiceOrderBadRequest creates PatchServiceOrderBadRequestRaw with default headers values
func NewPatchServiceOrderBadRequestRaw() *PatchServiceOrderBadRequestRaw {

	return &PatchServiceOrderBadRequestRaw{}
}

// WithPayload adds the payload to the patch service order bad request response
func (o *PatchServiceOrderBadRequest) WithPayload(payload *models.Error) *PatchServiceOrderBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service order bad request response
func (o *PatchServiceOrderBadRequestRaw) WithPayload(payload interface{}) *PatchServiceOrderBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service order bad request response
func (o *PatchServiceOrderBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceOrderBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceOrderBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceOrderUnauthorizedCode is the HTTP code returned for type PatchServiceOrderUnauthorized
const PatchServiceOrderUnauthorizedCode int = 401

/*
PatchServiceOrderUnauthorized Unauthorized

swagger:response patchServiceOrderUnauthorized
*/
type PatchServiceOrderUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type PatchServiceOrderUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceOrderUnauthorized creates PatchServiceOrderUnauthorized with default headers values
func NewPatchServiceOrderUnauthorized() *PatchServiceOrderUnauthorized {

	return &PatchServiceOrderUnauthorized{}
}

// NewPatchServiceOrderUnauthorized creates PatchServiceOrderUnauthorizedRaw with default headers values
func NewPatchServiceOrderUnauthorizedRaw() *PatchServiceOrderUnauthorizedRaw {

	return &PatchServiceOrderUnauthorizedRaw{}
}

// WithPayload adds the payload to the patch service order unauthorized response
func (o *PatchServiceOrderUnauthorized) WithPayload(payload *models.Error) *PatchServiceOrderUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service order unauthorized response
func (o *PatchServiceOrderUnauthorizedRaw) WithPayload(payload interface{}) *PatchServiceOrderUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service order unauthorized response
func (o *PatchServiceOrderUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceOrderUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceOrderUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceOrderForbiddenCode is the HTTP code returned for type PatchServiceOrderForbidden
const PatchServiceOrderForbiddenCode int = 403

/*
PatchServiceOrderForbidden Forbidden

swagger:response patchServiceOrderForbidden
*/
type PatchServiceOrderForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type PatchServiceOrderForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceOrderForbidden creates PatchServiceOrderForbidden with default headers values
func NewPatchServiceOrderForbidden() *PatchServiceOrderForbidden {

	return &PatchServiceOrderForbidden{}
}

// NewPatchServiceOrderForbidden creates PatchServiceOrderForbiddenRaw with default headers values
func NewPatchServiceOrderForbiddenRaw() *PatchServiceOrderForbiddenRaw {

	return &PatchServiceOrderForbiddenRaw{}
}

// WithPayload adds the payload to the patch service order forbidden response
func (o *PatchServiceOrderForbidden) WithPayload(payload *models.Error) *PatchServiceOrderForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service order forbidden response
func (o *PatchServiceOrderForbiddenRaw) WithPayload(payload interface{}) *PatchServiceOrderForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service order forbidden response
func (o *PatchServiceOrderForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceOrderForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceOrderForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceOrderNotFoundCode is the HTTP code returned for type PatchServiceOrderNotFound
const PatchServiceOrderNotFoundCode int = 404

/*
PatchServiceOrderNotFound Not Found

swagger:response patchServiceOrderNotFound
*/
type PatchServiceOrderNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type PatchServiceOrderNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceOrderNotFound creates PatchServiceOrderNotFound with default headers values
func NewPatchServiceOrderNotFound() *PatchServiceOrderNotFound {

	return &PatchServiceOrderNotFound{}
}

// NewPatchServiceOrderNotFound creates PatchServiceOrderNotFoundRaw with default headers values
func NewPatchServiceOrderNotFoundRaw() *PatchServiceOrderNotFoundRaw {

	return &PatchServiceOrderNotFoundRaw{}
}

// WithPayload adds the payload to the patch service order not found response
func (o *PatchServiceOrderNotFound) WithPayload(payload *models.Error) *PatchServiceOrderNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service order not found response
func (o *PatchServiceOrderNotFoundRaw) WithPayload(payload interface{}) *PatchServiceOrderNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service order not found response
func (o *PatchServiceOrderNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceOrderNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceOrderNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceOrderMethodNotAllowedCode is the HTTP code returned for type PatchServiceOrderMethodNotAllowed
const PatchServiceOrderMethodNotAllowedCode int = 405

/*
PatchServiceOrderMethodNotAllowed Method Not allowed

swagger:response patchServiceOrderMethodNotAllowed
*/
type PatchServiceOrderMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type PatchServiceOrderMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceOrderMethodNotAllowed creates PatchServiceOrderMethodNotAllowed with default headers values
func NewPatchServiceOrderMethodNotAllowed() *PatchServiceOrderMethodNotAllowed {

	return &PatchServiceOrderMethodNotAllowed{}
}

// NewPatchServiceOrderMethodNotAllowed creates PatchServiceOrderMethodNotAllowedRaw with default headers values
func NewPatchServiceOrderMethodNotAllowedRaw() *PatchServiceOrderMethodNotAllowedRaw {

	return &PatchServiceOrderMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the patch service order method not allowed response
func (o *PatchServiceOrderMethodNotAllowed) WithPayload(payload *models.Error) *PatchServiceOrderMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service order method not allowed response
func (o *PatchServiceOrderMethodNotAllowedRaw) WithPayload(payload interface{}) *PatchServiceOrderMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service order method not allowed response
func (o *PatchServiceOrderMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceOrderMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceOrderMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceOrderConflictCode is the HTTP code returned for type PatchServiceOrderConflict
const PatchServiceOrderConflictCode int = 409

/*
PatchServiceOrderConflict Conflict

swagger:response patchServiceOrderConflict
*/
type PatchServiceOrderConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type PatchServiceOrderConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceOrderConflict creates PatchServiceOrderConflict with default headers values
func NewPatchServiceOrderConflict() *PatchServiceOrderConflict {

	return &PatchServiceOrderConflict{}
}

// NewPatchServiceOrderConflict creates PatchServiceOrderConflictRaw with default headers values
func NewPatchServiceOrderConflictRaw() *PatchServiceOrderConflictRaw {

	return &PatchServiceOrderConflictRaw{}
}

// WithPayload adds the payload to the patch service order conflict response
func (o *PatchServiceOrderConflict) WithPayload(payload *models.Error) *PatchServiceOrderConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service order conflict response
func (o *PatchServiceOrderConflictRaw) WithPayload(payload interface{}) *PatchServiceOrderConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service order conflict response
func (o *PatchServiceOrderConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceOrderConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceOrderConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// PatchServiceOrderInternalServerErrorCode is the HTTP code returned for type PatchServiceOrderInternalServerError
const PatchServiceOrderInternalServerErrorCode int = 500

/*
PatchServiceOrderInternalServerError Internal Server Error

swagger:response patchServiceOrderInternalServerError
*/
type PatchServiceOrderInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type PatchServiceOrderInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPatchServiceOrderInternalServerError creates PatchServiceOrderInternalServerError with default headers values
func NewPatchServiceOrderInternalServerError() *PatchServiceOrderInternalServerError {

	return &PatchServiceOrderInternalServerError{}
}

// NewPatchServiceOrderInternalServerError creates PatchServiceOrderInternalServerErrorRaw with default headers values
func NewPatchServiceOrderInternalServerErrorRaw() *PatchServiceOrderInternalServerErrorRaw {

	return &PatchServiceOrderInternalServerErrorRaw{}
}

// WithPayload adds the payload to the patch service order internal server error response
func (o *PatchServiceOrderInternalServerError) WithPayload(payload *models.Error) *PatchServiceOrderInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the patch service order internal server error response
func (o *PatchServiceOrderInternalServerErrorRaw) WithPayload(payload interface{}) *PatchServiceOrderInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch service order internal server error response
func (o *PatchServiceOrderInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchServiceOrderInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *PatchServiceOrderInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
