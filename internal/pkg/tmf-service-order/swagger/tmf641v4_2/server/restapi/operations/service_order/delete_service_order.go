// Code generated by go-swagger; DO NOT EDIT.

package service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteServiceOrderHandlerFunc turns a function with the right signature into a delete service order handler
type DeleteServiceOrderHandlerFunc func(DeleteServiceOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteServiceOrderHandlerFunc) Handle(params DeleteServiceOrderParams) middleware.Responder {
	return fn(params)
}

// DeleteServiceOrderHandler interface for that can handle valid delete service order params
type DeleteServiceOrderHandler interface {
	Handle(DeleteServiceOrderParams) middleware.Responder
}

// NewDeleteServiceOrder creates a new http.Handler for the delete service order operation
func NewDeleteServiceOrder(ctx *middleware.Context, handler DeleteServiceOrderHandler) *DeleteServiceOrder {
	return &DeleteServiceOrder{Context: ctx, Handler: handler}
}

/*
	DeleteServiceOrder swagger:route DELETE /serviceOrder/{id} serviceOrder deleteServiceOrder

# Deletes a ServiceOrder

This operation deletes a ServiceOrder entity.
*/
type DeleteServiceOrder struct {
	Context *middleware.Context
	Handler DeleteServiceOrderHandler
}

func (o *DeleteServiceOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteServiceOrderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
