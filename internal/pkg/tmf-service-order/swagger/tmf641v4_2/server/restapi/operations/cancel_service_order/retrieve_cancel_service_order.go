// Code generated by go-swagger; DO NOT EDIT.

package cancel_service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveCancelServiceOrderHandlerFunc turns a function with the right signature into a retrieve cancel service order handler
type RetrieveCancelServiceOrderHandlerFunc func(RetrieveCancelServiceOrderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveCancelServiceOrderHandlerFunc) Handle(params RetrieveCancelServiceOrderParams) middleware.Responder {
	return fn(params)
}

// RetrieveCancelServiceOrderHandler interface for that can handle valid retrieve cancel service order params
type RetrieveCancelServiceOrderHandler interface {
	Handle(RetrieveCancelServiceOrderParams) middleware.Responder
}

// NewRetrieveCancelServiceOrder creates a new http.Handler for the retrieve cancel service order operation
func NewRetrieveCancelServiceOrder(ctx *middleware.Context, handler RetrieveCancelServiceOrderHandler) *RetrieveCancelServiceOrder {
	return &RetrieveCancelServiceOrder{Context: ctx, Handler: handler}
}

/*
	RetrieveCancelServiceOrder swagger:route GET /cancelServiceOrder/{id} cancelServiceOrder retrieveCancelServiceOrder

# Retrieves a CancelServiceOrder by ID

This operation retrieves a CancelServiceOrder entity. Attribute selection is enabled for all first level attributes.
*/
type RetrieveCancelServiceOrder struct {
	Context *middleware.Context
	Handler RetrieveCancelServiceOrderHandler
}

func (o *RetrieveCancelServiceOrder) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRetrieveCancelServiceOrderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
