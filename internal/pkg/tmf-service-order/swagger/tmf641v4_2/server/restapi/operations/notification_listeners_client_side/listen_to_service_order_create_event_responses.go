// Code generated by go-swagger; DO NOT EDIT.

package notification_listeners_client_side

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-order/swagger/tmf641v4_2/server/models"
)

// Alex Server response
// ListenToServiceOrderCreateEventCreatedCode is the HTTP code returned for type ListenToServiceOrderCreateEventCreated
const ListenToServiceOrderCreateEventCreatedCode int = 201

/*
ListenToServiceOrderCreateEventCreated Notified

swagger:response listenToServiceOrderCreateEventCreated
*/
type ListenToServiceOrderCreateEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

type ListenToServiceOrderCreateEventCreatedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderCreateEventCreated creates ListenToServiceOrderCreateEventCreated with default headers values
func NewListenToServiceOrderCreateEventCreated() *ListenToServiceOrderCreateEventCreated {

	return &ListenToServiceOrderCreateEventCreated{}
}

// NewListenToServiceOrderCreateEventCreated creates ListenToServiceOrderCreateEventCreatedRaw with default headers values
func NewListenToServiceOrderCreateEventCreatedRaw() *ListenToServiceOrderCreateEventCreatedRaw {

	return &ListenToServiceOrderCreateEventCreatedRaw{}
}

// WithPayload adds the payload to the listen to service order create event created response
func (o *ListenToServiceOrderCreateEventCreated) WithPayload(payload *models.EventSubscription) *ListenToServiceOrderCreateEventCreated {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order create event created response
func (o *ListenToServiceOrderCreateEventCreatedRaw) WithPayload(payload interface{}) *ListenToServiceOrderCreateEventCreatedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order create event created response
func (o *ListenToServiceOrderCreateEventCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderCreateEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderCreateEventCreatedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderCreateEventBadRequestCode is the HTTP code returned for type ListenToServiceOrderCreateEventBadRequest
const ListenToServiceOrderCreateEventBadRequestCode int = 400

/*
ListenToServiceOrderCreateEventBadRequest Bad Request

swagger:response listenToServiceOrderCreateEventBadRequest
*/
type ListenToServiceOrderCreateEventBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderCreateEventBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderCreateEventBadRequest creates ListenToServiceOrderCreateEventBadRequest with default headers values
func NewListenToServiceOrderCreateEventBadRequest() *ListenToServiceOrderCreateEventBadRequest {

	return &ListenToServiceOrderCreateEventBadRequest{}
}

// NewListenToServiceOrderCreateEventBadRequest creates ListenToServiceOrderCreateEventBadRequestRaw with default headers values
func NewListenToServiceOrderCreateEventBadRequestRaw() *ListenToServiceOrderCreateEventBadRequestRaw {

	return &ListenToServiceOrderCreateEventBadRequestRaw{}
}

// WithPayload adds the payload to the listen to service order create event bad request response
func (o *ListenToServiceOrderCreateEventBadRequest) WithPayload(payload *models.Error) *ListenToServiceOrderCreateEventBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order create event bad request response
func (o *ListenToServiceOrderCreateEventBadRequestRaw) WithPayload(payload interface{}) *ListenToServiceOrderCreateEventBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order create event bad request response
func (o *ListenToServiceOrderCreateEventBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderCreateEventBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderCreateEventBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderCreateEventUnauthorizedCode is the HTTP code returned for type ListenToServiceOrderCreateEventUnauthorized
const ListenToServiceOrderCreateEventUnauthorizedCode int = 401

/*
ListenToServiceOrderCreateEventUnauthorized Unauthorized

swagger:response listenToServiceOrderCreateEventUnauthorized
*/
type ListenToServiceOrderCreateEventUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderCreateEventUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderCreateEventUnauthorized creates ListenToServiceOrderCreateEventUnauthorized with default headers values
func NewListenToServiceOrderCreateEventUnauthorized() *ListenToServiceOrderCreateEventUnauthorized {

	return &ListenToServiceOrderCreateEventUnauthorized{}
}

// NewListenToServiceOrderCreateEventUnauthorized creates ListenToServiceOrderCreateEventUnauthorizedRaw with default headers values
func NewListenToServiceOrderCreateEventUnauthorizedRaw() *ListenToServiceOrderCreateEventUnauthorizedRaw {

	return &ListenToServiceOrderCreateEventUnauthorizedRaw{}
}

// WithPayload adds the payload to the listen to service order create event unauthorized response
func (o *ListenToServiceOrderCreateEventUnauthorized) WithPayload(payload *models.Error) *ListenToServiceOrderCreateEventUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order create event unauthorized response
func (o *ListenToServiceOrderCreateEventUnauthorizedRaw) WithPayload(payload interface{}) *ListenToServiceOrderCreateEventUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order create event unauthorized response
func (o *ListenToServiceOrderCreateEventUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderCreateEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderCreateEventUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderCreateEventForbiddenCode is the HTTP code returned for type ListenToServiceOrderCreateEventForbidden
const ListenToServiceOrderCreateEventForbiddenCode int = 403

/*
ListenToServiceOrderCreateEventForbidden Forbidden

swagger:response listenToServiceOrderCreateEventForbidden
*/
type ListenToServiceOrderCreateEventForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderCreateEventForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderCreateEventForbidden creates ListenToServiceOrderCreateEventForbidden with default headers values
func NewListenToServiceOrderCreateEventForbidden() *ListenToServiceOrderCreateEventForbidden {

	return &ListenToServiceOrderCreateEventForbidden{}
}

// NewListenToServiceOrderCreateEventForbidden creates ListenToServiceOrderCreateEventForbiddenRaw with default headers values
func NewListenToServiceOrderCreateEventForbiddenRaw() *ListenToServiceOrderCreateEventForbiddenRaw {

	return &ListenToServiceOrderCreateEventForbiddenRaw{}
}

// WithPayload adds the payload to the listen to service order create event forbidden response
func (o *ListenToServiceOrderCreateEventForbidden) WithPayload(payload *models.Error) *ListenToServiceOrderCreateEventForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order create event forbidden response
func (o *ListenToServiceOrderCreateEventForbiddenRaw) WithPayload(payload interface{}) *ListenToServiceOrderCreateEventForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order create event forbidden response
func (o *ListenToServiceOrderCreateEventForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderCreateEventForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderCreateEventForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderCreateEventNotFoundCode is the HTTP code returned for type ListenToServiceOrderCreateEventNotFound
const ListenToServiceOrderCreateEventNotFoundCode int = 404

/*
ListenToServiceOrderCreateEventNotFound Not Found

swagger:response listenToServiceOrderCreateEventNotFound
*/
type ListenToServiceOrderCreateEventNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderCreateEventNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderCreateEventNotFound creates ListenToServiceOrderCreateEventNotFound with default headers values
func NewListenToServiceOrderCreateEventNotFound() *ListenToServiceOrderCreateEventNotFound {

	return &ListenToServiceOrderCreateEventNotFound{}
}

// NewListenToServiceOrderCreateEventNotFound creates ListenToServiceOrderCreateEventNotFoundRaw with default headers values
func NewListenToServiceOrderCreateEventNotFoundRaw() *ListenToServiceOrderCreateEventNotFoundRaw {

	return &ListenToServiceOrderCreateEventNotFoundRaw{}
}

// WithPayload adds the payload to the listen to service order create event not found response
func (o *ListenToServiceOrderCreateEventNotFound) WithPayload(payload *models.Error) *ListenToServiceOrderCreateEventNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order create event not found response
func (o *ListenToServiceOrderCreateEventNotFoundRaw) WithPayload(payload interface{}) *ListenToServiceOrderCreateEventNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order create event not found response
func (o *ListenToServiceOrderCreateEventNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderCreateEventNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderCreateEventNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderCreateEventMethodNotAllowedCode is the HTTP code returned for type ListenToServiceOrderCreateEventMethodNotAllowed
const ListenToServiceOrderCreateEventMethodNotAllowedCode int = 405

/*
ListenToServiceOrderCreateEventMethodNotAllowed Method Not allowed

swagger:response listenToServiceOrderCreateEventMethodNotAllowed
*/
type ListenToServiceOrderCreateEventMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderCreateEventMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderCreateEventMethodNotAllowed creates ListenToServiceOrderCreateEventMethodNotAllowed with default headers values
func NewListenToServiceOrderCreateEventMethodNotAllowed() *ListenToServiceOrderCreateEventMethodNotAllowed {

	return &ListenToServiceOrderCreateEventMethodNotAllowed{}
}

// NewListenToServiceOrderCreateEventMethodNotAllowed creates ListenToServiceOrderCreateEventMethodNotAllowedRaw with default headers values
func NewListenToServiceOrderCreateEventMethodNotAllowedRaw() *ListenToServiceOrderCreateEventMethodNotAllowedRaw {

	return &ListenToServiceOrderCreateEventMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the listen to service order create event method not allowed response
func (o *ListenToServiceOrderCreateEventMethodNotAllowed) WithPayload(payload *models.Error) *ListenToServiceOrderCreateEventMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order create event method not allowed response
func (o *ListenToServiceOrderCreateEventMethodNotAllowedRaw) WithPayload(payload interface{}) *ListenToServiceOrderCreateEventMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order create event method not allowed response
func (o *ListenToServiceOrderCreateEventMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderCreateEventMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderCreateEventMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderCreateEventConflictCode is the HTTP code returned for type ListenToServiceOrderCreateEventConflict
const ListenToServiceOrderCreateEventConflictCode int = 409

/*
ListenToServiceOrderCreateEventConflict Conflict

swagger:response listenToServiceOrderCreateEventConflict
*/
type ListenToServiceOrderCreateEventConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderCreateEventConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderCreateEventConflict creates ListenToServiceOrderCreateEventConflict with default headers values
func NewListenToServiceOrderCreateEventConflict() *ListenToServiceOrderCreateEventConflict {

	return &ListenToServiceOrderCreateEventConflict{}
}

// NewListenToServiceOrderCreateEventConflict creates ListenToServiceOrderCreateEventConflictRaw with default headers values
func NewListenToServiceOrderCreateEventConflictRaw() *ListenToServiceOrderCreateEventConflictRaw {

	return &ListenToServiceOrderCreateEventConflictRaw{}
}

// WithPayload adds the payload to the listen to service order create event conflict response
func (o *ListenToServiceOrderCreateEventConflict) WithPayload(payload *models.Error) *ListenToServiceOrderCreateEventConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order create event conflict response
func (o *ListenToServiceOrderCreateEventConflictRaw) WithPayload(payload interface{}) *ListenToServiceOrderCreateEventConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order create event conflict response
func (o *ListenToServiceOrderCreateEventConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderCreateEventConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderCreateEventConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// ListenToServiceOrderCreateEventInternalServerErrorCode is the HTTP code returned for type ListenToServiceOrderCreateEventInternalServerError
const ListenToServiceOrderCreateEventInternalServerErrorCode int = 500

/*
ListenToServiceOrderCreateEventInternalServerError Internal Server Error

swagger:response listenToServiceOrderCreateEventInternalServerError
*/
type ListenToServiceOrderCreateEventInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type ListenToServiceOrderCreateEventInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewListenToServiceOrderCreateEventInternalServerError creates ListenToServiceOrderCreateEventInternalServerError with default headers values
func NewListenToServiceOrderCreateEventInternalServerError() *ListenToServiceOrderCreateEventInternalServerError {

	return &ListenToServiceOrderCreateEventInternalServerError{}
}

// NewListenToServiceOrderCreateEventInternalServerError creates ListenToServiceOrderCreateEventInternalServerErrorRaw with default headers values
func NewListenToServiceOrderCreateEventInternalServerErrorRaw() *ListenToServiceOrderCreateEventInternalServerErrorRaw {

	return &ListenToServiceOrderCreateEventInternalServerErrorRaw{}
}

// WithPayload adds the payload to the listen to service order create event internal server error response
func (o *ListenToServiceOrderCreateEventInternalServerError) WithPayload(payload *models.Error) *ListenToServiceOrderCreateEventInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the listen to service order create event internal server error response
func (o *ListenToServiceOrderCreateEventInternalServerErrorRaw) WithPayload(payload interface{}) *ListenToServiceOrderCreateEventInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the listen to service order create event internal server error response
func (o *ListenToServiceOrderCreateEventInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListenToServiceOrderCreateEventInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *ListenToServiceOrderCreateEventInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
