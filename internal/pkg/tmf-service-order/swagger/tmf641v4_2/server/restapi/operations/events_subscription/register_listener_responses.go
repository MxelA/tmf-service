// Code generated by go-swagger; DO NOT EDIT.

package events_subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/MxelA/tmf-service/internal/pkg/tmf-service-order/swagger/tmf641v4_2/server/models"
)

// Alex Server response
// RegisterListenerCreatedCode is the HTTP code returned for type RegisterListenerCreated
const RegisterListenerCreatedCode int = 201

/*
RegisterListenerCreated Subscribed

swagger:response registerListenerCreated
*/
type RegisterListenerCreated struct {

	/*
	  In: Body
	*/
	Payload *models.EventSubscription `json:"body,omitempty"`
}

type RegisterListenerCreatedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRegisterListenerCreated creates RegisterListenerCreated with default headers values
func NewRegisterListenerCreated() *RegisterListenerCreated {

	return &RegisterListenerCreated{}
}

// NewRegisterListenerCreated creates RegisterListenerCreatedRaw with default headers values
func NewRegisterListenerCreatedRaw() *RegisterListenerCreatedRaw {

	return &RegisterListenerCreatedRaw{}
}

// WithPayload adds the payload to the register listener created response
func (o *RegisterListenerCreated) WithPayload(payload *models.EventSubscription) *RegisterListenerCreated {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the register listener created response
func (o *RegisterListenerCreatedRaw) WithPayload(payload interface{}) *RegisterListenerCreatedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register listener created response
func (o *RegisterListenerCreated) SetPayload(payload *models.EventSubscription) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterListenerCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RegisterListenerCreatedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RegisterListenerBadRequestCode is the HTTP code returned for type RegisterListenerBadRequest
const RegisterListenerBadRequestCode int = 400

/*
RegisterListenerBadRequest Bad Request

swagger:response registerListenerBadRequest
*/
type RegisterListenerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type RegisterListenerBadRequestRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRegisterListenerBadRequest creates RegisterListenerBadRequest with default headers values
func NewRegisterListenerBadRequest() *RegisterListenerBadRequest {

	return &RegisterListenerBadRequest{}
}

// NewRegisterListenerBadRequest creates RegisterListenerBadRequestRaw with default headers values
func NewRegisterListenerBadRequestRaw() *RegisterListenerBadRequestRaw {

	return &RegisterListenerBadRequestRaw{}
}

// WithPayload adds the payload to the register listener bad request response
func (o *RegisterListenerBadRequest) WithPayload(payload *models.Error) *RegisterListenerBadRequest {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the register listener bad request response
func (o *RegisterListenerBadRequestRaw) WithPayload(payload interface{}) *RegisterListenerBadRequestRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register listener bad request response
func (o *RegisterListenerBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterListenerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RegisterListenerBadRequestRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RegisterListenerUnauthorizedCode is the HTTP code returned for type RegisterListenerUnauthorized
const RegisterListenerUnauthorizedCode int = 401

/*
RegisterListenerUnauthorized Unauthorized

swagger:response registerListenerUnauthorized
*/
type RegisterListenerUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type RegisterListenerUnauthorizedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRegisterListenerUnauthorized creates RegisterListenerUnauthorized with default headers values
func NewRegisterListenerUnauthorized() *RegisterListenerUnauthorized {

	return &RegisterListenerUnauthorized{}
}

// NewRegisterListenerUnauthorized creates RegisterListenerUnauthorizedRaw with default headers values
func NewRegisterListenerUnauthorizedRaw() *RegisterListenerUnauthorizedRaw {

	return &RegisterListenerUnauthorizedRaw{}
}

// WithPayload adds the payload to the register listener unauthorized response
func (o *RegisterListenerUnauthorized) WithPayload(payload *models.Error) *RegisterListenerUnauthorized {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the register listener unauthorized response
func (o *RegisterListenerUnauthorizedRaw) WithPayload(payload interface{}) *RegisterListenerUnauthorizedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register listener unauthorized response
func (o *RegisterListenerUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterListenerUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RegisterListenerUnauthorizedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RegisterListenerForbiddenCode is the HTTP code returned for type RegisterListenerForbidden
const RegisterListenerForbiddenCode int = 403

/*
RegisterListenerForbidden Forbidden

swagger:response registerListenerForbidden
*/
type RegisterListenerForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type RegisterListenerForbiddenRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRegisterListenerForbidden creates RegisterListenerForbidden with default headers values
func NewRegisterListenerForbidden() *RegisterListenerForbidden {

	return &RegisterListenerForbidden{}
}

// NewRegisterListenerForbidden creates RegisterListenerForbiddenRaw with default headers values
func NewRegisterListenerForbiddenRaw() *RegisterListenerForbiddenRaw {

	return &RegisterListenerForbiddenRaw{}
}

// WithPayload adds the payload to the register listener forbidden response
func (o *RegisterListenerForbidden) WithPayload(payload *models.Error) *RegisterListenerForbidden {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the register listener forbidden response
func (o *RegisterListenerForbiddenRaw) WithPayload(payload interface{}) *RegisterListenerForbiddenRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register listener forbidden response
func (o *RegisterListenerForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterListenerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RegisterListenerForbiddenRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RegisterListenerNotFoundCode is the HTTP code returned for type RegisterListenerNotFound
const RegisterListenerNotFoundCode int = 404

/*
RegisterListenerNotFound Not Found

swagger:response registerListenerNotFound
*/
type RegisterListenerNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type RegisterListenerNotFoundRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRegisterListenerNotFound creates RegisterListenerNotFound with default headers values
func NewRegisterListenerNotFound() *RegisterListenerNotFound {

	return &RegisterListenerNotFound{}
}

// NewRegisterListenerNotFound creates RegisterListenerNotFoundRaw with default headers values
func NewRegisterListenerNotFoundRaw() *RegisterListenerNotFoundRaw {

	return &RegisterListenerNotFoundRaw{}
}

// WithPayload adds the payload to the register listener not found response
func (o *RegisterListenerNotFound) WithPayload(payload *models.Error) *RegisterListenerNotFound {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the register listener not found response
func (o *RegisterListenerNotFoundRaw) WithPayload(payload interface{}) *RegisterListenerNotFoundRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register listener not found response
func (o *RegisterListenerNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterListenerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RegisterListenerNotFoundRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RegisterListenerMethodNotAllowedCode is the HTTP code returned for type RegisterListenerMethodNotAllowed
const RegisterListenerMethodNotAllowedCode int = 405

/*
RegisterListenerMethodNotAllowed Method Not allowed

swagger:response registerListenerMethodNotAllowed
*/
type RegisterListenerMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type RegisterListenerMethodNotAllowedRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRegisterListenerMethodNotAllowed creates RegisterListenerMethodNotAllowed with default headers values
func NewRegisterListenerMethodNotAllowed() *RegisterListenerMethodNotAllowed {

	return &RegisterListenerMethodNotAllowed{}
}

// NewRegisterListenerMethodNotAllowed creates RegisterListenerMethodNotAllowedRaw with default headers values
func NewRegisterListenerMethodNotAllowedRaw() *RegisterListenerMethodNotAllowedRaw {

	return &RegisterListenerMethodNotAllowedRaw{}
}

// WithPayload adds the payload to the register listener method not allowed response
func (o *RegisterListenerMethodNotAllowed) WithPayload(payload *models.Error) *RegisterListenerMethodNotAllowed {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the register listener method not allowed response
func (o *RegisterListenerMethodNotAllowedRaw) WithPayload(payload interface{}) *RegisterListenerMethodNotAllowedRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register listener method not allowed response
func (o *RegisterListenerMethodNotAllowed) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterListenerMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RegisterListenerMethodNotAllowedRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RegisterListenerConflictCode is the HTTP code returned for type RegisterListenerConflict
const RegisterListenerConflictCode int = 409

/*
RegisterListenerConflict Conflict

swagger:response registerListenerConflict
*/
type RegisterListenerConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type RegisterListenerConflictRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRegisterListenerConflict creates RegisterListenerConflict with default headers values
func NewRegisterListenerConflict() *RegisterListenerConflict {

	return &RegisterListenerConflict{}
}

// NewRegisterListenerConflict creates RegisterListenerConflictRaw with default headers values
func NewRegisterListenerConflictRaw() *RegisterListenerConflictRaw {

	return &RegisterListenerConflictRaw{}
}

// WithPayload adds the payload to the register listener conflict response
func (o *RegisterListenerConflict) WithPayload(payload *models.Error) *RegisterListenerConflict {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the register listener conflict response
func (o *RegisterListenerConflictRaw) WithPayload(payload interface{}) *RegisterListenerConflictRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register listener conflict response
func (o *RegisterListenerConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterListenerConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RegisterListenerConflictRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// Alex Server response
// RegisterListenerInternalServerErrorCode is the HTTP code returned for type RegisterListenerInternalServerError
const RegisterListenerInternalServerErrorCode int = 500

/*
RegisterListenerInternalServerError Internal Server Error

swagger:response registerListenerInternalServerError
*/
type RegisterListenerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

type RegisterListenerInternalServerErrorRaw struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRegisterListenerInternalServerError creates RegisterListenerInternalServerError with default headers values
func NewRegisterListenerInternalServerError() *RegisterListenerInternalServerError {

	return &RegisterListenerInternalServerError{}
}

// NewRegisterListenerInternalServerError creates RegisterListenerInternalServerErrorRaw with default headers values
func NewRegisterListenerInternalServerErrorRaw() *RegisterListenerInternalServerErrorRaw {

	return &RegisterListenerInternalServerErrorRaw{}
}

// WithPayload adds the payload to the register listener internal server error response
func (o *RegisterListenerInternalServerError) WithPayload(payload *models.Error) *RegisterListenerInternalServerError {
	o.Payload = payload
	return o
}

// WithPayload adds the payload to the register listener internal server error response
func (o *RegisterListenerInternalServerErrorRaw) WithPayload(payload interface{}) *RegisterListenerInternalServerErrorRaw {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the register listener internal server error response
func (o *RegisterListenerInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RegisterListenerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// WriteResponseRaw to the client
func (o *RegisterListenerInternalServerErrorRaw) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
